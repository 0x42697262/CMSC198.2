var searchIndex = JSON.parse('{\
"anstream":{"doc":"<strong>Auto-adapting <code>stdout</code> / <code>stderr</code> streams</strong>","t":"NNNDCENGGDALLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLOOOFFALLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIQKK","n":["Always","AlwaysAnsi","Auto","AutoStream","Buffer","ColorChoice","Never","Stderr","Stdout","StripStream","adapter","always","always_ansi","auto","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choice","clone","clone_into","current_choice","default","eprint","eprintln","eq","flush","flush","fmt","fmt","fmt","from","from","from","global","into","into","into","into_inner","into_inner","is_terminal","is_terminal","lock","lock","lock","lock","never","new","new","panic","print","println","stderr","stdout","stream","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_all","write_all","write_fmt","write_fmt","write_global","write_vectored","write_vectored","StripBytes","StripBytesIter","StripStr","StripStrIter","StrippedBytes","StrippedStr","WinconBytes","WinconBytesIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","extend","extract_next","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","new","new","new","new","next","next","next","next","next","strip_bytes","strip_next","strip_next","strip_str","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsLockedWrite","IsTerminal","RawStream","Write","as_locked_write","is_terminal"],"q":[[0,"anstream"],[76,"anstream::adapter"],[201,"anstream::stream"],[207,"std::io::error"],[208,"std::io"],[209,"core::fmt"],[210,"core::fmt"],[211,"core::fmt"],[212,"std::io::stdio"],[213,"core::fmt"],[214,"core::option"],[215,"alloc::string"]],"d":["","","","<code>std::io::Write</code> that adapts ANSI escape codes to the …","","Selection for overriding color output Selection for …","","","","Only pass printable data to the inner <code>Write</code>","Gracefully degrade styled output","Force color, no matter what the inner <code>Write</code> supports.","Force ANSI escape codes to be passed through as-is, no …","Auto-adapt for the stream’s capabilities","","","","","","","Report the desired choice for the given stream","","","Prefer <code>AutoStream::choice</code>","","Prints to <code>stderr</code>.","Prints to <code>stderr</code>, with a newline.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the current <code>ColorChoice</code> state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the wrapped <code>RawStream</code>","Get the wrapped <code>std::io::Write</code>","","","Get exclusive access to the <code>AutoStream</code>","Get exclusive access to the <code>AutoStream</code>","Get exclusive access to the <code>StripStream</code>","Get exclusive access to the <code>StripStream</code>","Only pass printable data to the inner <code>Write</code>.","Runtime control over styling behavior","Only pass printable data to the inner <code>Write</code>","Panics the current thread.","Prints to <code>stdout</code>.","Prints to <code>stdout</code>, with a newline.","Create an ANSI escape code compatible stderr","Create an ANSI escape code compatible stdout","Higher-level traits to describe writeable streams","","","","","","","","","","","","","","","","","Override the detected <code>ColorChoice</code>","","","Incrementally strip non-contiguous data","See <code>StripBytes</code>","Incrementally strip non-contiguous data","See <code>StripStr</code>","See <code>strip_bytes</code>","See <code>strip_str</code>","Incrementally convert to wincon calls for non-contiguous …","See <code>WinconBytes</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Strip the next slice of bytes","Strip the next segment of data","","<strong>Note:</strong> this does <em>not</em> exhaust the <code>Iterator</code>","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a <code>Vec</code> of the printable content","Report the bytes has been exhausted","Initial state","See <code>strip_bytes</code>","Initial state","Initial state","","","","","","Strip ANSI escapes from bytes, returning the printable …","Strip the next segment of data","Strip the next segment of data","Strip ANSI escapes from a <code>&amp;str</code>, returning the printable …","","","","","","","Create a <code>String</code> of the printable content","","","","","","","","","","","","","","","","","","","","","","","","","","","Required functionality for underlying <code>std::io::Write</code> for …","","",""],"i":[3,3,3,0,0,0,3,0,0,0,0,1,1,1,3,1,8,3,1,8,1,3,3,1,3,0,0,3,1,8,3,1,8,3,1,8,3,3,1,8,1,8,1,8,1,1,8,8,1,1,8,0,0,0,0,0,0,3,3,1,8,3,1,8,3,1,8,1,8,1,8,1,8,3,1,8,0,0,0,0,0,0,0,0,28,29,33,30,31,34,32,35,28,29,33,30,31,34,32,35,28,29,30,31,32,28,29,30,31,32,28,29,30,31,32,28,29,33,30,31,34,32,35,30,32,28,28,29,33,30,31,34,32,35,28,29,33,30,31,34,32,35,28,29,33,30,31,34,32,35,28,33,30,34,35,30,30,29,30,31,32,28,33,30,34,35,0,29,31,0,28,29,30,31,32,28,28,28,29,33,30,31,34,32,35,28,29,33,30,31,34,32,35,28,29,33,30,31,34,32,35,0,0,0,7,7,15],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-1]]],2],[-1,[[1,[-1]]],2],[-1,[[1,[-1]]],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,2],[3,3],[[-1,-2],4,[],[]],[[[1,[-1]]],3,2],[[],3],0,0,[[3,3],5],[[[1,[-1]]],[[6,[4]]],[2,7]],[[[8,[-1]]],[[6,[4]]],[9,7]],[[3,10],[[12,[4,11]]]],[[[1,[-1]],10],13,[14,2]],[[[8,[-1]],10],13,[9,14]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,2],[[[8,[-1]]],-1,9],[[[1,[-1]]],5,2],[[[8,[-1]]],5,[9,15]],[[[1,[16]]],[[1,[17]]]],[[[1,[18]]],[[1,[19]]]],[[[8,[18]]],[[8,[19]]]],[[[8,[16]]],[[8,[17]]]],[-1,[[1,[-1]]],2],[[-1,3],[[1,[-1]]],2],[-1,[[8,[-1]]],9],0,0,0,[[],20],[[],21],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[[1,[-1]],[24,[23]]],[[6,[25]]],[2,7]],[[[8,[-1]],[24,[23]]],[[6,[25]]],[9,7]],[[[1,[-1]],[24,[23]]],[[6,[4]]],[2,7]],[[[8,[-1]],[24,[23]]],[[6,[4]]],[9,7]],[[[1,[-1]],26],[[6,[4]]],[2,7]],[[[8,[-1]],26],[[6,[4]]],[9,7]],[3,4],[[[1,[-1]],[24,[27]]],[[6,[25]]],[2,7]],[[[8,[-1]],[24,[27]]],[[6,[25]]],[9,7]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[29,29],[30,30],[31,31],[32,32],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],28],[[],29],[[],30],[[],31],[[],32],[[28,28],5],[[29,29],5],[[33,33],5],[[30,30],5],[[31,31],5],[[34,34],5],[[32,32],5],[[35,35],5],[[30,[24,[23]]],4],[[32,[24,[23]]],35],[[28,10],13],[[28,10],13],[[29,10],13],[[33,10],13],[[30,10],13],[[31,10],13],[[34,10],13],[[32,10],13],[[35,10],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,[[36,[23]]]],[30,5],[[],29],[[[24,[23]]],30],[[],31],[[],32],[28,37],[33,37],[30,37],[34,37],[35,37],[[[24,[23]]],30],[[29,38],33],[[31,[24,[23]]],34],[38,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[28,39],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0,0,0,0,[-1,[],[]],[-1,5,[]]],"c":[],"p":[[3,"AutoStream",0],[8,"RawStream",201],[4,"ColorChoice",0],[15,"tuple"],[15,"bool"],[6,"Result",207],[8,"AsLockedWrite",201],[3,"StripStream",0],[8,"Write",208],[3,"Formatter",209],[3,"Error",209],[4,"Result",210],[6,"Result",209],[8,"Debug",209],[8,"IsTerminal",201],[3,"Stdout",211],[3,"StdoutLock",211],[3,"Stderr",211],[3,"StderrLock",211],[6,"Stderr",0],[6,"Stdout",0],[3,"TypeId",212],[15,"u8"],[15,"slice"],[15,"usize"],[3,"Arguments",209],[3,"IoSlice",208],[3,"StrippedStr",76],[3,"StripStr",76],[3,"StrippedBytes",76],[3,"StripBytes",76],[3,"WinconBytes",76],[3,"StripStrIter",76],[3,"StripBytesIter",76],[3,"WinconBytesIter",76],[3,"Vec",213],[4,"Option",214],[15,"str"],[3,"String",215]],"b":[[44,"impl-AutoStream%3CStdout%3E"],[45,"impl-AutoStream%3CStderr%3E"],[46,"impl-StripStream%3CStderr%3E"],[47,"impl-StripStream%3CStdout%3E"],[125,"impl-Debug-for-StrippedStr%3C\'s%3E"],[126,"impl-Display-for-StrippedStr%3C\'s%3E"]]},\
"anstyle":{"doc":"ANSI Text Styling","t":"NNDESSNNNNNNNNNNSENSSSSDDNSSSNNDNDSDSNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_fg_color","get_underline_color","hash","hash","hash","hash","hash","hash","hash","hidden","index","insert","into","into","into","into","into","into","into","into","into_ansi","into_iter","invert","is_bright","is_plain","is_plain","italic","iter","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","write_reset_to","write_to"],"q":[[0,"anstyle"],[239,"core::option"],[240,"core::cmp"],[241,"core::fmt"],[242,"core::fmt"],[243,"core::convert"],[244,"core::fmt"],[245,"core::clone"],[246,"alloc::string"],[247,"core::result"],[248,"core::any"],[249,"std::io"],[250,"std::io::error"]],"d":["","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Set foreground color","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Write the relevant <code>Reset</code> code","Write the ANSI code"],"i":[4,4,0,0,6,6,8,8,8,8,8,8,8,8,8,8,6,0,8,6,6,6,6,0,0,8,6,6,6,8,8,0,4,0,6,0,6,8,8,1,3,6,3,6,3,3,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,8,6,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,12,3,6,6,12,3,3,3,4,8,10,1,6,11,12,3,3,3,4,8,10,1,6,11,12,12,3,3,4,4,4,4,4,4,8,10,10,10,1,1,6,11,12,3,3,10,1,3,3,3,3,4,8,10,1,6,12,3,3,10,6,4,8,10,1,6,11,12,3,10,11,3,8,6,3,3,6,6,3,11,4,8,10,1,4,8,10,1,4,8,10,1,6,12,3,1,6,6,12,3,4,8,10,1,4,8,10,1,3,6,3,6,3,6,3,4,8,10,1,6,11,12,3,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,4,8,10,1,6,11,12,3,3,3,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,[5,[4]]],3],[[6,6],6],[[3,6],3],[[6,6],7],[[3,6],7],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,9],8],[6,6],[4,4],[8,8],[10,10],[1,1],[6,6],[11,11],[12,12],[3,3],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[4,4],13],[[8,8],13],[[10,10],13],[[1,1],13],[[6,6],13],[[12,12],13],[[3,3],13],[[6,6],9],[[],6],[[],12],[[],3],[3,3],[[3,6],3],[[4,4],9],[[8,8],9],[[10,10],9],[[1,1],9],[[6,6],9],[[11,11],9],[[12,12],9],[[3,6],9],[[3,3],9],[[3,[5,[4]]],3],[[4,14],15],[[8,14],15],[[10,14],15],[[1,14],15],[[6,14],15],[[11,14],15],[[12,14],15],[[12,14],15],[[3,14],15],[[3,14],15],[8,4],[1,4],[[[7,[2,2,2]]],4],[-1,-1,[]],[10,4],[2,4],[-1,-1,[]],[-1,-1,[]],[8,10],[2,10],[-1,-1,[]],[[[7,[2,2,2]]],1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,3],[-1,-1,[]],[8,10],[1,2],[3,[[5,[4]]]],[3,6],[3,[[5,[4]]]],[3,[[5,[4]]]],[[4,-1],7,16],[[8,-1],7,16],[[10,-1],7,16],[[1,-1],7,16],[[6,-1],7,16],[[12,-1],7,16],[[3,-1],7,16],[3,3],[10,2],[[6,6],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,[[5,[8]]]],[-1,-2,[],[]],[3,3],[8,9],[6,9],[3,9],[3,3],[6,11],[[],6],[[],3],[11,5],[[4,-1],3,[[17,[4]]]],[[8,-1],3,[[17,[4]]]],[[10,-1],3,[[17,[4]]]],[[1,-1],3,[[17,[4]]]],[4,3],[8,3],[10,3],[1,3],[[4,4],[[5,[13]]]],[[8,8],[[5,[13]]]],[[10,10],[[5,[13]]]],[[1,1],[[5,[13]]]],[[6,6],[[5,[13]]]],[[12,12],[[5,[13]]]],[[3,3],[[5,[13]]]],[1,2],[[6,6],6],[6,[[0,[18,19,20]]]],[12,[[0,[18,19,20]]]],[3,[[0,[18,19,20]]]],[4,[[0,[18,19,20]]]],[8,[[0,[18,19,20]]]],[10,[[0,[18,19,20]]]],[1,[[0,[18,19,20]]]],[4,[[0,[18,19,20]]]],[8,[[0,[18,19,20]]]],[10,[[0,[18,19,20]]]],[1,[[0,[18,19,20]]]],[3,[[0,[18,19,20]]]],[[6,6,9],6],[3,3],[[6,6],6],[[3,6],3],[[6,6],7],[[3,6],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[3,3],[[3,[5,[4]]],3],[[3,24],[[25,[7]]]],[[3,24],[[25,[7]]]]],"c":[],"p":[[3,"RgbColor",0],[15,"u8"],[3,"Style",0],[4,"Color",0],[4,"Option",239],[3,"Effects",0],[15,"tuple"],[4,"AnsiColor",0],[15,"bool"],[3,"Ansi256Color",0],[3,"EffectIter",0],[3,"Reset",0],[4,"Ordering",240],[3,"Formatter",241],[6,"Result",241],[8,"Hasher",242],[8,"Into",243],[8,"Display",241],[8,"Copy",244],[8,"Clone",245],[3,"String",246],[4,"Result",247],[3,"TypeId",248],[8,"Write",249],[6,"Result",250]],"b":[[101,"impl-PartialEq%3CEffects%3E-for-Style"],[102,"impl-PartialEq-for-Style"],[110,"impl-Debug-for-Reset"],[111,"impl-Display-for-Reset"],[112,"impl-Debug-for-Style"],[113,"impl-Display-for-Style"],[114,"impl-From%3CAnsiColor%3E-for-Color"],[115,"impl-From%3CRgbColor%3E-for-Color"],[116,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[118,"impl-From%3CAnsi256Color%3E-for-Color"],[119,"impl-From%3Cu8%3E-for-Color"],[122,"impl-From%3CAnsiColor%3E-for-Ansi256Color"],[123,"impl-From%3Cu8%3E-for-Ansi256Color"]]},\
"anstyle_parse":{"doc":"Parser for implementing virtual terminal emulators","t":"DIGDDDIDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNLLLLLLLLLLLLLLLLLLFLLLLLLLLLL","n":["AsciiParser","CharAccumulator","DefaultCharAccumulator","Params","ParamsIter","Parser","Perform","Utf8Parser","add","add","add","advance","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","csi_dispatch","default","default","default","default","eq","eq","eq","eq","esc_dispatch","execute","fmt","fmt","fmt","fmt","from","from","from","from","from","hook","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","new","next","osc_dispatch","print","put","size_hint","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unhook","Action","Anywhere","BeginUtf8","Clear","Collect","CsiDispatch","CsiEntry","CsiIgnore","CsiIntermediate","CsiParam","DcsEntry","DcsIgnore","DcsIntermediate","DcsParam","DcsPassthrough","EscDispatch","Escape","EscapeIntermediate","Execute","Ground","Hook","Ignore","Nop","OscEnd","OscPut","OscStart","OscString","Param","Print","Put","SosPmApcString","State","Unhook","Utf8","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","into","into","state_change","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"anstyle_parse"],[88,"anstyle_parse::state"],[151,"core::option"],[152,"core::clone"],[153,"core::default"],[154,"core::cmp"],[155,"core::fmt"],[156,"core::fmt"],[157,"core::any"]],"d":["Only allow parsing 7-bit ASCII","Build a <code>char</code> out of bytes","","","Immutable subparameter iterator.","Parser for raw <em>VTE</em> protocol which delegates actions to a …","Performs actions requested by the <code>Parser</code>","Allow parsing UTF-8","Build a <code>char</code> out of bytes","","","Advance the parser state","","","","","","","","","","","","","","","","","","","A final character has arrived for a CSI sequence","","","","","","","","","The final character of an escape sequence has arrived.","Execute a C0 or C1 control function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Invoked when a final character arrives in first part of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if there are no parameters present.","Returns an iterator over all parameters and subparameters.","Returns the number of parameters.","Create a new Parser","","Dispatch an operating system command.","Draw a character to the screen and update states.","Pass bytes as part of a device control string to the …","","","","","","","","","","","","","","","","","","","","","","Called when a device control string is terminated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transition to next <code>State</code>","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,8,4,5,6,19,10,6,4,5,19,10,6,4,5,10,6,4,5,10,6,4,5,9,10,6,4,5,10,6,4,5,9,9,10,6,4,5,19,10,6,4,5,9,19,10,6,4,5,19,10,10,10,10,6,19,9,9,9,19,0,10,6,4,5,19,10,6,4,5,19,10,6,4,5,19,10,6,4,5,9,0,23,24,24,24,24,23,23,23,23,23,23,23,23,23,24,23,23,24,23,24,24,24,24,24,24,23,24,24,24,23,0,24,23,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,0,23,24,23,23,24,24,23,24,23,24],"f":[0,0,0,0,0,0,0,0,[[-1,1],[[3,[2]]],[]],[[4,1],[[3,[2]]]],[[5,1],[[3,[2]]]],[[[6,[-1]],-2,1],7,8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[[6,[-1]]],[[6,[-1]]],11],[4,4],[5,5],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,10,[12,[1]],13,1],7,[]],[[],10],[[],[[6,[-1]]],14],[[],4],[[],5],[[10,10],13],[[[6,[-1]],[6,[-1]]],13,15],[[4,4],13],[[5,5],13],[[-1,[12,[1]],13,1],7,[]],[[-1,1],7,[]],[[10,16],17],[[[6,[-1]],16],17,18],[[4,16],17],[[5,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,10,[12,[1]],13,1],7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10],[10,13],[10,19],[10,20],[[],6],[19,3],[[-1,[12,[[12,[1]]]],13],7,[]],[[-1,2],7,[]],[[-1,1],7,[]],[19,[[7,[20,[3,[20]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[24,24],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[],23],[[],24],[[23,23],13],[[24,24],13],[[23,16],17],[[24,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,1],[[7,[23,24]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[1,[[21,[23]]]],[1,[[21,[24]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]]],"c":[],"p":[[15,"u8"],[15,"char"],[4,"Option",151],[3,"AsciiParser",0],[3,"Utf8Parser",0],[3,"Parser",0],[15,"tuple"],[8,"CharAccumulator",0],[8,"Perform",0],[3,"Params",0],[8,"Clone",152],[15,"slice"],[15,"bool"],[8,"Default",153],[8,"PartialEq",154],[3,"Formatter",155],[6,"Result",155],[8,"Debug",155],[3,"ParamsIter",0],[15,"usize"],[4,"Result",156],[3,"TypeId",157],[4,"State",88],[4,"Action",88]],"b":[]},\
"anstyle_query":{"doc":"","t":"FFFFFFFAF","n":["clicolor","clicolor_force","is_ci","no_color","term_supports_ansi_color","term_supports_color","truecolor","windows","enable_ansi_colors"],"q":[[0,"anstyle_query"],[8,"anstyle_query::windows"],[9,"core::option"]],"d":["Check CLICOLOR status","Check CLICOLOR_FORCE status","Report whether this is running in CI","Check NO_COLOR status","Check <code>TERM</code> for ANSI color support","Check <code>TERM</code> for color support","Check COLORTERM for truecolor support","Windows-specific style queries","Enable ANSI escape codes …"],"i":[0,0,0,0,0,0,0,0,0],"f":[[[],[[2,[1]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[],[[2,[1]]]]],"c":[],"p":[[15,"bool"],[4,"Option",9]],"b":[]},\
"clap":{"doc":"<strong>Command Line Argument Parser for Rust</strong>","t":"NNNDEDDINEDINNNNNNGNNINNNNDNNINNNINNNIENLLLLLLLLLLLLLLOLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLKOKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLOLLKLLLLLLLLLLLLNNDEDEDDDNNNNNSNDNNDNNNNNINDDDDNQDDDDDNESNNNDDDDDINDNNNQEDIDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLNNDESSNNNNNNNNNNSENSSSSDDNSSSNNDNDSDDSNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNEENDNNNNDIENNNNNNNNNDNNNNNNNNGDNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNNDDEDNEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["Always","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgMatches","Args","Auto","ColorChoice","Command","CommandFactory","CommandName","CommandString","CommandWithArguments","Count","DirPath","EmailAddress","Error","ExecutablePath","FilePath","FromArgMatches","Help","HelpLong","HelpShort","Hostname","Id","Never","Other","Parser","Set","SetFalse","SetTrue","Subcommand","Unknown","Url","Username","ValueEnum","ValueHint","Version","about","action","after_help","after_long_help","alias","alias","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_missing_positional","allow_negative_numbers","arg","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","args_present","as_ref","as_str","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","author","before_help","before_long_help","bin_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","color","command","command","command_for_update","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","contains_id","debug_assert","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_ifs","default_values","defer","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_delimit_trailing_values","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","error","exclusive","external_subcommand_value_parser","find_subcommand","find_subcommand_mut","flatten_help","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_str","from_str","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_args","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_count","get_default_values","get_display_name","get_external_subcommand_value_parser","get_flag","get_groups","get_help","get_help_heading","get_id","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_many","get_matches","get_matches_from","get_matches_mut","get_name","get_next_help_heading","get_num_args","get_occurrences","get_one","get_opts","get_positionals","get_possible_values","get_raw","get_raw_occurrences","get_short","get_short_and_visible_aliases","get_short_flag","get_styles","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_value_terminator","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_short_aliases","get_visible_short_flag_aliases","global","group","group","group_id","groups","groups","has_subcommand","has_subcommands","hash","hash","help","help_expected","help_heading","help_template","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ids","ignore_case","ignore_errors","index","index","index_of","indices_of","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_flatten_help_set","is_global_set","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_required_set","is_required_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_trailing_var_arg_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","max_term_width","multicall","multiple","mut_arg","mut_args","mut_group","mut_subcommand","name","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","num_args","override_help","override_usage","overrides_with","overrides_with_all","parse","parse_from","parser","partial_cmp","partial_cmp","possible_values","print_help","print_long_help","propagate_version","raw","remove_many","remove_occurrences","remove_one","remove_subcommand","render_help","render_long_help","render_long_version","render_usage","render_version","require_equals","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_if","requires_ifs","set_bin_name","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","styles","subcommand","subcommand","subcommand_help_heading","subcommand_matches","subcommand_name","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","takes_values","term_width","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_possible_value","to_string","to_string","to_string","to_string","trailing_var_arg","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_get_occurrences","try_get_one","try_get_raw","try_get_raw_occurrences","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse_from","try_remove_many","try_remove_occurrences","try_remove_one","try_update_from","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from","update_from_arg_matches","update_from_arg_matches_mut","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_source","value_terminator","value_variants","value_variants","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgPredicate","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DirPath","EMPTY","EmailAddress","EnumValueParser","Equals","ExecutablePath","FalseyValueParser","FilePath","Help","HelpLong","HelpShort","Hostname","IntoResettable","IsPresent","MapValueParser","NonEmptyStringValueParser","OsStr","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","RangedI64ValueParser","RangedU64ValueParser","Reset","Resettable","SINGLE","Set","SetFalse","SetTrue","Str","StringValueParser","StyledStr","Styles","TryMapValueParser","TypedValueParser","Unknown","UnknownArgumentValueParser","Url","Username","Value","Value","ValueHint","ValueParser","ValueParserFactory","ValueRange","Version","alias","aliases","and_suggest","ansi","as_os_str","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_error","get_header","get_help","get_invalid","get_literal","get_name","get_name_and_aliases","get_placeholder","get_usage","get_valid","hash","hash","hash","hash","header","help","hide","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","invalid","is_hide_set","literal","map","matches","max_values","min_values","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","os_string","parse","parse","parse","parse","parse","parse","parse_","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref_","parse_ref_","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_buf","placeholder","plain","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","range","range","start_bound","string","styled","styling","suggest","suggest_arg","takes_values","to_os_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage","valid","value_parser","write_char","write_str","Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","Styles","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_fg_color","get_underline_color","hash","hash","hash","hash","hash","hash","hash","hidden","index","insert","into","into","into","into","into","into","into","into","into_ansi","into_iter","invert","is_bright","is_plain","is_plain","italic","iter","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","write_reset_to","write_to","ActualNumValues","ArgumentConflict","Bool","ContextKind","ContextValue","Custom","DefaultFormatter","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","Err","Error","ErrorFormatter","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","KindFormatter","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","Ok","PriorArg","Result","RichFormatter","String","Strings","StyledStr","StyledStrs","Suggested","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyValues","TrailingArg","UnknownArgument","Usage","ValidSubcommand","ValidValue","ValueValidation","WrongNumberOfValues","apply","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","exit","exit_code","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_error","format_error","format_error","from","from","from","from","from","from","from","from","get","hash","hash","insert","into","into","into","into","into","into","kind","new","print","raw","render","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_stderr","with_cmd","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","IdsRef","Indices","MatchesError","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","default","default","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","actual","expected"],"q":[[0,"clap"],[500,"clap::builder"],[1039,"clap::builder::styling"],[1279,"clap::error"],[1421,"clap::parser"],[1540,"clap::parser::MatchesError"],[1542,"core::iter::traits::collect"],[1543,"core::convert"],[1544,"alloc::string"],[1545,"core::cmp"],[1546,"core::fmt"],[1547,"core::option"],[1548,"std::ffi::os_str"],[1549,"core::convert"],[1550,"alloc::vec"],[1551,"core::iter::traits::iterator"],[1552,"core::any"],[1553,"core::clone"],[1554,"core::marker"],[1555,"core::marker"],[1556,"clap_builder::parser::matches::arg_matches"],[1557,"core::ops::function"],[1558,"core::ops::function"],[1559,"clap_builder::parser::matches::arg_matches"],[1560,"core::convert"],[1561,"std::ffi::os_str"],[1562,"clap_builder::util::any_value"],[1563,"core::marker"],[1564,"core::error"]],"d":["Enables colored output regardless of whether or not the …","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Container for parse results.","Parse a set of arguments into a user-defined container.","Enables colored output only when the output is going to a …","Represents the color preferences for program output","Build a command-line interface.","Create a <code>Command</code> relevant for a user-defined container.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Email address.","Command Line Argument Parser Error","Path to an executable file.","Path to a file.","Converts an instance of <code>ArgMatches</code> to a user-defined …","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","<code>Arg</code> or <code>ArgGroup</code> identifier","Disables colored output no matter if the output is going …","None of the hints below apply. Disables shell completion …","Parse command-line arguments into <code>Self</code>.","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","Parse a sub-command into a user-defined enum.","Default value if hint is not specified. Follows shell …","Complete web address.","Name of a local operating system user.","Parse arguments into enums.","Provide shell with hint on how to complete an argument.","When encountered, display <code>Command::version</code>","Sets the program’s description for the short help (<code>-h</code>).","Specify how to react to an argument when parsing it.","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Create an <code>Arg</code> from a usage string.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Replace prior occurrences of arguments rather than error","Check if any args were present on the command line","","Get the raw string of the <code>Id</code>","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","Define <code>Command</code> line arguments","","","","","","","","","","","","","","","","","","","Sets when to color output.","Build a <code>Command</code> that can instantiate <code>Self</code>.","Requires <code>cargo</code> feature flag to be enabled.","Build a <code>Command</code> that can update <code>self</code>.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Check if values are present for the argument or group id","Catch problems earlier in the development cycle.","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Specifies multiple values and conditions in the same …","Value for the argument when not present.","Delay initialization for parts of the <code>Command</code>","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","Error reporting","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Specifies how to parse external subcommand arguments.","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","Flatten subcommand help into the current command’s help","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Getters for all args. It will return a vector of <code>Id</code>","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Gets the value of a specific <code>ArgAction::Count</code> flag","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Get the name of the argument","Get the name of the group","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Iterate over values of a specific option or positional …","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Get the name of the cmd.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate over the values passed to each occurrence of an …","Gets the value of a specific option or positional argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Get the names of possible values for this argument. Only …","Iterate over the original argument values.","Iterate over the original values for each occurrence of an …","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Return the current <code>Styles</code> for the <code>Command</code>","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the value terminator for this argument. The …","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","Report the <code>ArgGroup::id</code> for this set of arguments","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Test whether <code>Self</code> can parse a specific subcommand","Returns <code>true</code> if this <code>Command</code> has subcommands.","","","Sets the description of the argument for short help (<code>-h</code>).","Panic if help descriptions are omitted.","Override the current help section.","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Match values against <code>PossibleValuesParser</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Arg::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Get the custom section heading specified via …","Report whether <code>Arg::global</code> is set","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","Return true if the group allows more than one of the …","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Reports whether <code>Arg::required</code> is set","Reports whether <code>ArgGroup::required</code> is set","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::trailing_var_arg</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Limit the line length for wrapping help when using the …","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate all <code>Arg</code>s after they’ve been added …","Allows one to mutate an <code>ArgGroup</code> after it’s been added …","Allows one to mutate a <code>Command</code> after it’s been added as …","(Re)Sets the program’s name.","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","Specifies the number of arguments parsed per occurrence","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse from <code>std::env::args_os()</code>, exit on error.","Parse from iterator, exit on error.","<code>Command</code> line argument parser","","","Report all <code>possible_values</code>","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Consume all following arguments.","Return values of a specific option or positional argument.","Return values for each occurrence of an option.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","Render the short help message (<code>-h</code>) to a <code>StyledStr</code>","Render the long help message (<code>--help</code>) to a <code>StyledStr</code>.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Requires that options use the <code>--option=val</code> syntax","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Specify arguments or groups that must be present when this …","Require another argument if this arg matches the …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","Sets the <code>Styles</code> for terminal output","Adds a subcommand to the list of valid possibilities.","The name and <code>ArgMatches</code> of the current subcommand.","Sets the help heading used for subcommands when printing …","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Returns whether this action accepts values on the …","Sets the terminal width at which to wrap help messages.","","","","","","","","","The canonical argument value.","","","","","","This is a “VarArg” and everything that follows should …","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","Non-panicking version of <code>ArgMatches::get_occurrences</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","Non-panicking version of <code>ArgMatches::get_raw_occurrences</code>","","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_occurrences</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","Update from iterator, return Err on error.","","","","","","","","","Update from iterator, exit on error.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Allow grouping of multiple values via a delimiter.","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Specify the typed behavior of the argument.","Select a <code>ValueParser</code> implementation from the intended type","Report where argument value came from","Sentinel to <strong>stop</strong> parsing multiple values of a given …","All possible argument values, in display order.","","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Operations to perform on argument values","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Nor argument values, or a flag","Email address.","Parse an <code>ValueEnum</code> value.","Does the argument match the specified value?","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Convert to the intended resettable type","Is the argument present?","Adapt a <code>TypedValueParser</code> from one value to another","Parse non-empty string values","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Parse number that fall within a range of values","Parse number that fall within a range of values","Reset builder value","Clearable builder value","A single argument value, the most common case for options","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::string</code>","Terminal-styling container","Terminal styling definitions","Adapt a <code>TypedValueParser</code> from one value to another","Parse/validate argument values","Default value if hint is not specified. Follows shell …","When encountered, report ErrorKind::UnknownArgument","Complete web address.","Name of a local operating system user.","Overwrite builder value","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","Values per occurrence for an argument","When encountered, display <code>Command::version</code>","Sets a <em>hidden</em> alias for this argument value.","Sets multiple <em>hidden</em> aliases for this argument value.","Extend the suggestions","Display using ANSI Escape Code styling","Get the raw string as an <code>std::ffi::OsStr</code>","","","","","","","Get the raw string of the <code>Str</code>","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error heading","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Error heading","General Heading style, e.g. <code>help_heading</code>","Get the help specified for this argument, if any","Highlight invalid usage","Literal command-line syntax, e.g. <code>--help</code>","Get the name of the argument value","Returns all valid values of the argument value.","Descriptions within command-line syntax, e.g. <code>value_name</code>","Usage heading","Highlight suggested usage","","","","","General Heading style, e.g. <code>help_heading</code>","Sets the help description of the value.","Hides this value from help and shell completions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to the intended resettable type","","","","","","","","","","","","","","","","","","","","","","","","Highlight invalid usage","Report if <code>PossibleValue::hide</code> is set","Literal command-line syntax, e.g. <code>--help</code>","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Most number of values the argument accepts","Fewest number of values the argument accepts","Custom parser for argument values","Create a <code>PossibleValue</code> with its name.","Create a range","Create an empty buffer","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","<code>OsString</code> parser for argument values","Parse the argument value","","","","","","Parse the argument value","Parse the argument value","","","","","","","","","","","","","","","Parse the argument value","","","","","","<code>PathBuf</code> parser for argument values","Descriptions within command-line syntax, e.g. <code>value_name</code>","No terminal styling","Reflect on enumerated value properties","Reflect on enumerated value properties","","","","","","","","Narrow the supported range","Narrow the supported range","","<code>String</code> parser for argument values","Default terminal styling","Terminal <code>Styles</code> for help and error output","Provide a general suggestion","Suggest an alternative argument","Report whether the argument takes any values (ie is a flag)","Get the raw string as an <code>OsString</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapt a <code>TypedValueParser</code> from one value to another","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","","","","Usage heading","Highlight suggested usage","Create the specified <code>Self::Parser</code>","","","","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Terminal styling definitions","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Set foreground color","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Write the relevant <code>Reset</code> code","Write the ANSI code","Number of values present","Occurs when the user provides two values which conflict …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","Richly formatted error context","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Contains the error value","Command Line Argument Parser Error","Defines how to format an error for displaying to the user","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Report <code>ErrorKind</code>","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Contains the success value","Existing arguments","Short hand for <code>Result</code> type","Richly formatted error context","A single value","Many values","A single value","many value","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when a user provides a flag, option, argument or …","A usage string","Accepted subcommands","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","Apply an alternative formatter to the error","End-user description of the error case, where relevant","End-user description of the error case, where relevant","","","","","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","Prints the error and exits.","Returns the exit code that <code>.exit</code> will exit the process …","","","","","","","","","Format the existing message with the Command’s context","Stylize the error for the terminal","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lookup a piece of context","","","Insert a piece of context","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Create an error with a pre-defined message","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","Create an unformatted error","Render the error message to a <code>StyledStr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","Apply <code>Command</code>’s formatting to the error","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Iterate over multiple values for an argument via …","Iterate over multiple values for an argument via …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[17,16,5,0,0,0,0,0,17,0,0,0,16,16,16,5,16,16,0,16,16,0,5,5,5,16,0,17,16,0,5,5,5,0,16,16,16,0,0,5,1,4,1,1,4,1,4,1,1,4,1,4,9,1,0,1,9,1,1,1,12,10,10,115,115,116,116,1,1,1,1,5,4,9,1,16,12,10,10,17,5,4,9,1,16,12,10,17,1,0,5,4,9,1,16,12,10,17,5,4,9,1,16,12,10,17,4,10,1,117,0,117,4,9,4,9,12,1,4,9,1,16,12,10,17,4,4,4,4,4,4,4,4,1,1,1,1,1,1,4,1,1,4,9,16,12,10,10,10,10,10,17,0,1,4,1,1,1,1,5,4,4,9,1,1,16,12,10,10,17,17,5,4,4,9,9,1,1,16,12,10,10,10,10,10,10,17,118,118,66,16,17,1,4,1,1,4,1,1,4,1,1,9,1,1,1,1,1,1,12,4,1,1,12,1,4,4,4,9,4,4,1,4,1,4,1,12,1,1,1,1,1,4,12,12,1,1,4,12,12,4,4,1,1,1,1,1,1,4,4,4,4,4,1,4,1,1,4,1,4,4,1,115,4,1,116,1,16,10,4,1,4,1,4,1,4,4,4,1,4,4,9,12,4,1,4,1,12,12,1,1,5,4,9,1,16,12,10,17,5,16,10,10,10,1,4,1,4,1,1,1,1,1,1,1,4,1,4,4,4,4,4,1,4,4,4,1,9,4,1,1,4,1,4,4,9,1,1,1,4,4,4,1,1,1,1,4,1,1,1,9,1,1,1,1,1,4,9,1,1,1,4,1,1,4,1,1,4,4,119,119,0,4,10,17,1,1,1,4,12,12,12,12,1,1,1,1,1,4,4,9,4,4,4,4,4,4,4,9,9,4,4,1,4,4,4,1,1,1,1,1,12,1,12,12,1,1,1,1,1,5,1,5,4,9,1,16,12,10,17,66,17,4,1,10,17,4,12,5,4,9,1,16,12,10,17,12,1,1,1,12,12,12,12,5,4,9,1,16,12,10,17,119,119,12,12,12,119,5,4,9,1,16,12,10,17,119,118,118,4,4,4,4,4,0,12,4,66,17,1,4,1,4,1,1,1,4,4,1,1,16,5,0,0,0,0,0,0,0,16,16,16,5,16,42,16,0,20,16,0,16,5,5,5,16,0,20,0,0,0,0,16,120,0,0,0,0,0,51,0,42,5,5,5,0,0,0,0,0,0,16,0,16,16,51,89,0,0,0,0,5,44,44,60,2,19,19,19,6,6,6,6,6,25,25,20,19,19,44,42,51,6,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,19,51,6,2,19,44,42,6,2,2,62,63,64,65,68,71,73,74,75,76,47,47,19,6,42,20,19,19,19,19,19,19,44,42,51,6,6,6,6,6,6,6,2,47,25,20,19,44,42,42,51,6,6,2,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,25,25,25,25,25,25,25,25,25,25,20,20,19,19,19,19,19,19,19,19,44,44,42,42,42,42,42,42,42,42,51,51,51,51,6,6,6,6,6,2,2,2,2,2,62,63,64,65,67,67,68,68,71,71,73,74,75,76,77,78,60,47,47,47,44,47,47,44,44,47,47,47,19,42,51,6,47,44,44,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,3,25,19,42,51,6,6,6,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,44,47,89,44,42,42,25,44,42,2,62,63,64,65,67,68,71,73,74,75,76,25,89,62,63,64,67,77,89,89,62,63,64,65,67,68,71,73,74,75,76,77,78,60,89,60,19,51,6,2,25,47,47,25,89,65,67,73,74,75,77,78,68,71,42,25,47,0,60,60,42,19,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,42,6,2,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,89,25,25,20,19,44,42,51,6,2,62,63,64,65,67,68,71,73,74,75,76,77,78,60,47,47,47,120,2,2,101,101,0,0,102,102,103,103,103,103,103,103,103,103,103,103,102,0,103,102,102,102,102,0,0,103,102,102,102,103,103,0,101,0,102,0,0,102,103,103,100,83,102,83,102,83,83,83,101,103,104,100,102,105,106,83,101,103,104,100,102,105,106,83,103,102,101,103,104,100,102,105,106,83,101,103,104,100,102,105,106,83,101,103,104,100,102,106,83,102,102,106,83,83,83,101,103,104,100,102,105,106,83,83,83,101,103,104,100,102,105,106,106,83,83,101,101,101,101,101,101,103,104,104,104,100,100,102,105,106,83,83,104,100,83,83,83,83,101,103,104,100,102,106,83,83,104,102,101,103,104,100,102,105,106,83,104,105,83,103,102,83,83,102,102,83,105,101,103,104,100,101,103,104,100,101,103,104,100,102,106,83,100,102,102,106,83,101,103,104,100,101,103,104,100,83,102,83,102,83,102,83,101,103,104,100,102,105,106,83,106,83,101,103,104,100,102,105,106,83,101,103,104,100,102,105,106,83,101,103,104,100,102,105,106,83,83,83,83,83,110,22,111,0,0,110,0,22,22,22,121,0,0,0,110,22,110,110,22,22,110,22,22,0,110,22,22,22,111,111,121,110,0,0,111,111,111,111,110,110,110,110,110,22,22,110,22,110,110,110,22,22,23,110,22,113,122,23,110,111,22,113,122,23,110,111,22,110,111,22,110,111,22,23,110,111,22,23,23,23,23,110,110,111,111,22,22,23,109,113,122,113,122,23,23,23,110,111,22,23,110,22,23,113,122,23,110,111,22,23,23,23,23,23,23,110,111,22,23,110,111,22,113,122,23,110,111,22,113,122,23,110,111,22,113,122,23,110,111,22,23,23,0,59,59,57,59,0,0,0,0,57,0,0,0,57,49,55,37,45,50,59,57,49,55,37,45,50,59,57,49,55,37,45,50,59,57,49,55,37,45,50,59,59,55,37,45,50,59,57,57,49,55,37,45,50,59,57,49,55,37,45,50,59,57,49,55,37,45,50,59,49,55,37,45,50,49,55,37,45,50,49,55,37,45,50,59,49,55,37,45,50,57,49,55,37,45,50,59,57,57,49,55,37,45,50,59,57,49,55,37,45,50,59,57,49,55,37,45,50,59,123,123],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[5]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[6]]]],[[4,-1],4,7],[[1,-1],1,7],[[1,8],1],[[4,8],4],[[1,8],1],[[4,8],4],[[9,-1],9,[[3,[10]]]],[[1,-1],1,[[11,[4]]]],0,[[1,8],1],[[9,-1],9,7],[[1,-1],1,7],[[1,8],1],[[1,8],1],[12,8],[10,13],[10,13],[1,1],[1,1],[1,1],[1,1],[[1,-1],1,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,15],0,[5,5],[4,4],[9,9],[1,1],[16,16],[12,12],[10,10],[17,17],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[4,4],18],[[10,10],18],[[1,17],1],[[],1],0,[[],1],[[4,-1],4,[[3,[10]]]],[[9,-1],9,[[3,[10]]]],[[4,-1],4,7],[[9,-1],9,7],[[12,13],8],[1,15],[[],4],[[],9],[[],1],[[],16],[[],12],[[],10],[[],17],[[4,-1],4,[[3,[19]]]],[[4,-1],4,[[11,[19]]]],[[4,-1],4,7],[[4,-1],4,7],[[4,-1],4,[[3,[19]]]],[[4,-1,-2,-3],4,[[11,[10]]],[[11,[20]]],[[3,[19]]]],[[4,-1],4,7],[[4,-1],4,7],[1,1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,-1],1,[[3,[14]]]],[[4,-1],4,[[3,[21]]]],[[1,-1],1,[[3,[21]]]],[[1,8],1],[[4,4],8],[[9,9],8],[[16,16],8],[[12,12],8],[[10,13],8],[[10,13],8],[[10,6],8],[[10,14],8],[[10,10],8],[[17,17],8],0,[[1,22,-1],23,24],[[4,8],4],[[1,-1],1,[[3,[25]]]],[[1,-1],[[26,[1]]],[[28,[27]]]],[[1,-1],[[26,[1]]],[[28,[27]]]],[[1,8],1],[[5,29],[[31,[15,30]]]],[[4,29],[[31,[15,30]]]],[[4,29],[[31,[15,30]]]],[[9,29],[[31,[15,30]]]],[[1,29],[[31,[15,30]]]],[[1,29],[[31,[15,30]]]],[[16,29],[[31,[15,30]]]],[[12,29],[[31,[15,30]]]],[[10,29],[[31,[15,30]]]],[[10,29],[[31,[15,30]]]],[[17,29],[[31,[15,30]]]],[[17,29],[[31,[15,30]]]],[-1,-1,[]],[-1,-1,[]],[4,4],[9,9],[-1,-1,[]],[-1,-1,[]],[1,1],[-1,-1,[]],[-1,-1,[]],[6,10],[13,10],[13,10],[6,10],[10,10],[-1,-1,[]],[-1,-1,[]],[12,[[31,[-1,23]]],[]],[12,[[31,[-1,23]]],[]],[[13,8],[[31,[-1,14]]],[]],[13,[[31,[16]]]],[13,[[31,[17]]]],[1,[[26,[2]]]],[4,5],[1,[[26,[2]]]],[1,[[26,[2]]]],[4,[[26,[[32,[13]]]]]],[1,[[0,[33]]]],[1,[[0,[33]]]],[4,[[26,[[32,[34]]]]]],[1,[[0,[33]]]],[[1,4],[[32,[4]]]],[9,[[0,[33]]]],[1,[[0,[33]]]],[1,[[26,[13]]]],[1,[[26,[2]]]],[1,[[26,[2]]]],[1,[[26,[13]]]],[1,17],[[12,13],35],[4,[[36,[19]]]],[1,[[26,[13]]]],[1,[[26,[25]]]],[[12,13],8],[1,[[0,[33]]]],[4,[[26,[2]]]],[4,[[26,[13]]]],[4,10],[9,10],[4,[[26,[21]]]],[4,[[26,[13]]]],[1,[[26,[2]]]],[4,[[26,[[32,[13]]]]]],[1,[[26,[13]]]],[4,[[26,[2]]]],[1,[[26,[13]]]],[[12,13],[[26,[[37,[-1]]]]],[38,39,40,41]],[1,12],[[1,-1],12,7],[1,12],[1,13],[1,[[26,[13]]]],[4,[[26,[42]]]],[[12,13],[[26,[[43,[-1]]]]],[38,39,40,41]],[[12,13],[[26,[-1]]],[38,39,40,41]],[1,[[0,[33]]]],[1,[[0,[33]]]],[4,[[32,[44]]]],[[12,13],[[26,[45]]]],[[12,13],[[26,[46]]]],[4,[[26,[34]]]],[4,[[26,[[32,[34]]]]]],[1,[[26,[34]]]],[1,47],[1,[[26,[13]]]],[1,[[26,[13]]]],[1,[[0,[33]]]],[1,[[0,[33]]]],[4,[[26,[34]]]],[4,16],[4,[[26,[[36,[6]]]]]],[4,25],[4,[[26,[6]]]],[1,[[26,[13]]]],[4,[[26,[[32,[13]]]]]],[1,[[0,[33]]]],[1,[[0,[33]]]],[4,[[26,[[32,[34]]]]]],[1,[[0,[33]]]],[[4,8],4],[[4,-1],4,[[3,[10]]]],[[1,-1],1,[[11,[9]]]],[[],[[26,[10]]]],[[4,-1],4,7],[[1,-1],1,7],[13,8],[1,8],[[16,-1],15,48],[[10,-1],15,48],[[4,-1],4,[[3,[2]]]],[[1,8],1],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[4,8],4],[[1,8],1],[[4,8],4],[[4,8],4],[[4,8],4],[[1,8],1],[[4,8],4],[[4,-1],4,[[11,[10]]]],[[9,-1],9,[[11,[10]]]],[12,49],[[4,8],4],[[1,8],1],[[4,-1],4,[[3,[21]]]],[[1,10]],[[12,13],[[26,[21]]]],[[12,13],[[26,[50]]]],[[1,8],1],[[1,8],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[51,[5]]]],[16,[[51,[16]]]],[-1,[[51,[10]]],[]],[-1,[[51,[6]]],[]],[-1,[[51,[14]]],[]],[1,8],[4,8],[1,8],[4,8],[1,8],[1,8],[1,8],[1,8],[1,8],[1,8],[1,8],[4,8],[1,8],[4,8],[4,8],[4,8],[4,8],[4,8],[1,8],[4,8],[4,8],[4,8],[1,8],[9,8],[4,8],[1,8],[1,8],[4,8],[1,8],[4,8],[4,8],[9,8],[1,8],[1,8],[1,8],[4,8],[[4,8],4],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[11,[6]]]],[[1,-1],1,[[3,[6]]]],[[1,-1],1,7],[[4,-1],4,[[3,[2]]]],[[1,-1],1,[[3,[6]]]],[[1,21],1],[[1,8],1],[[9,8],9],[[1,-1,-2],1,[[28,[13]]],52],[[1,-1],1,53],[[1,-1,-2],1,[[28,[13]]],52],[[1,-1,-2],1,[[28,[13]]],52],[[1,-1],1,[[11,[6]]]],[-1,4,[[11,[10]]]],[-1,9,[[11,[10]]]],[-1,1,[[11,[6]]]],[[1,-1],1,[[3,[21]]]],[[1,-1],1,[[3,[6]]]],[[4,8],4],[[1,8],1],[[1,8],1],[[4,-1],4,[[3,[42]]]],[[1,-1],1,[[3,[2]]]],[[1,-1],1,[[3,[2]]]],[[4,-1],4,[[3,[10]]]],[[4,-1],4,7],[[],-1,[]],[-1,-2,7,[]],0,[[4,4],[[26,[18]]]],[[10,10],[[26,[18]]]],[[],[[0,[33]]]],[1,[[31,[15,54]]]],[1,[[31,[15,54]]]],[[1,8],1],[[4,8],4],[[12,13],[[26,[[55,[-1]]]]],[38,39,40,41]],[[12,13],[[26,[[56,[-1]]]]],[38,39,40,41]],[[12,13],[[26,[-1]]],[38,39,40,41]],[12,[[26,[[15,[14,12]]]]]],[1,2],[1,2],[1,14],[1,2],[1,14],[[4,8],4],[[4,8],4],[[9,8],9],[[4,-1,-2],4,[[11,[10]]],[[11,[19]]]],[[4,-1],4,7],[[4,-1],4,7],[[4,-1],4,[[3,[10]]]],[[4,-1],4,7],[[4,-1],4,7],[[4,-1],4,[[3,[10]]]],[[9,-1],9,[[3,[10]]]],[[9,-1],9,7],[[4,-1,-2],4,[[11,[20]]],[[11,[10]]]],[[4,-1],4,7],[[1,-1],15,[[11,[14]]]],[[4,-1],4,[[3,[34]]]],[[4,-1],4,[[3,[34]]]],[[4,-1],4,7],[[1,-1],1,[[3,[34]]]],[[1,-1],1,[[3,[34]]]],[[1,-1],1,7],[[1,47],1],[[1,-1],1,[[11,[1]]]],[12,[[26,[[15,[13,12]]]]]],[[1,-1],1,[[3,[6]]]],[[12,13],[[26,[12]]]],[12,[[26,[13]]]],[[1,8],1],[[1,8],1],[[1,8],1],[[1,-1],1,[[3,[6]]]],[[1,-1],1,7],[5,8],[[1,21],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[44]]],[]],[17,[[26,[44]]]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[4,8],4],[[12,13],[[31,[8,57]]]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[12,13],[[31,[[26,[[37,[-1]]]],57]]],[38,39,40,41]],[1,[[31,[12,23]]]],[[1,-1],[[31,[12,23]]],7],[[1,-1],[[31,[12,23]]],7],[[12,13],[[31,[[26,[[43,[-1]]]],57]]],[38,39,40,41]],[[12,13],[[31,[[26,[-1]],57]]],[38,39,40,41]],[[12,13],[[31,[[26,[45]],57]]]],[[12,13],[[31,[[26,[46]],57]]]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[],[[31,[-1,23]]],[]],[-1,[[31,[-2,23]]],7,[]],[[12,13],[[31,[[26,[[55,[-1]]]],57]]],[38,39,40,41]],[[12,13],[[31,[[26,[[56,[-1]]]],57]]],[38,39,40,41]],[[12,13],[[31,[[26,[-1]],57]]],[38,39,40,41]],[[-1,-2],[[31,[15,23]]],[],7],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[-1,-2],15,[],7],[[-1,12],[[31,[15,23]]],[]],[[-1,12],[[31,[15,23]]],[]],[[4,-1],4,[[3,[34]]]],[[4,-1],4,[[3,[16]]]],[[4,-1],4,[[3,[6]]]],[[4,-1],4,7],[[4,-1],4,[[3,[25]]]],0,[[12,13],[[26,[59]]]],[[4,-1],4,[[3,[6]]]],[[],[[36,[-1]]],[]],[[],[[36,[17]]]],[[1,-1],1,[[3,[6]]]],[[4,-1],4,[[3,[6]]]],[[1,-1],1,[[3,[6]]]],[[4,-1],4,7],[[1,-1],1,7],[[1,-1],1,[[3,[6]]]],[[1,-1],1,7],[[4,-1],4,[[3,[34]]]],[[4,-1],4,7],[[1,-1],1,[[3,[34]]]],[[1,-1],1,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[44,-1],44,[[3,[6]]]],[[44,-1],44,7],[[60,-1],60,[[11,[2]]]],[2,[[0,[24]]]],[19,27],[19,61],[19,27],[6,27],[6,61],[6,[[36,[35]]]],[6,13],[6,13],[[],25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[20,20],[19,19],[44,44],[42,42],[[[51,[-1]]],[[51,[-1]]],39],[6,6],[2,2],[62,62],[63,63],[64,64],[[[65,[-1]]],[[65,[-1]]],[39,66,39,40,41]],[67,67],[[[68,[-1]]],[[68,[-1]]],[39,[70,[69]],39,40,41]],[[[71,[-1]]],[[71,[-1]]],[39,[70,[72]]]],[73,73],[74,74],[75,75],[76,76],[[[77,[-1,-2]]],[[77,[-1,-2]]],39,39],[[[78,[-1,-2]]],[[78,[-1,-2]]],39,39],[60,60],[47,47],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[19,19],18],[[[51,[-1]],[51,[-1]]],18,79],[[6,6],18],[[2,2],18],[[],19],[[],44],[[],42],[[],6],[[],2],[[],2],[[],62],[[],63],[[],64],[[],[[65,[-1]]],[66,39,40,41]],[[],[[68,[-1]]],[[70,[69]],39,40,41]],[[],[[71,[-1]]],[[70,[72]]]],[[],73],[[],74],[[],75],[[],76],[[],47],[[],47],[19,27],[6,13],[42,[[80,[21]]]],[[20,20],8],[[19,19],8],[[19,27],8],[[19,14],8],[[19,81],8],[[19,13],8],[[19,13],8],[[44,44],8],[[42,42],8],[[[51,[-1]],[51,[-1]]],8,82],[[6,6],8],[[6,10],8],[[6,13],8],[[6,27],8],[[6,14],8],[[6,27],8],[[6,13],8],[[2,2],8],[[47,83],47],[[25,29],[[31,[15,30]]]],[[20,29],[[31,[15,30]]]],[[19,29],[[31,[15,30]]]],[[44,29],[[31,[15,30]]]],[[42,29],[[31,[15,30]]]],[[42,29],[[31,[15,30]]]],[[[51,[-1]],29],[[31,[15,30]]],84],[[6,29],[[31,[15,30]]]],[[6,29],[[31,[15,30]]]],[[2,29],[[31,[15,30]]]],[[2,29],[[31,[15,30]]]],[[62,29],[[31,[15,30]]]],[[63,29],[[31,[15,30]]]],[[64,29],[[31,[15,30]]]],[[[65,[-1]],29],[[31,[15,30]]],[84,66,39,40,41]],[[67,29],[[31,[15,30]]]],[[[68,[-1]],29],[[31,[15,30]]],[84,[70,[69]],39,40,41]],[[[71,[-1]],29],[[31,[15,30]]],[84,[70,[72]]]],[[73,29],[[31,[15,30]]]],[[74,29],[[31,[15,30]]]],[[75,29],[[31,[15,30]]]],[[76,29],[[31,[15,30]]]],[[[77,[-1,-2]],29],[[31,[15,30]]],84,84],[[[78,[-1,-2]],29],[[31,[15,30]]],84,84],[[60,29],[[31,[15,30]]]],[[47,29],[[31,[15,30]]]],[[[85,[69]]],25],[[[86,[69]]],25],[[[87,[69]]],25],[88,25],[-1,25,[89,40,41]],[-1,-1,[]],[[[90,[69]]],25],[[[91,[69]]],25],[[[32,[-1]]],25,[[11,[44]]]],[[[92,[-1]]],25,[[11,[44]]]],[-1,20,[[11,[19]]]],[-1,-1,[]],[6,19],[19,19],[13,19],[6,19],[27,19],[27,19],[13,19],[-1,-1,[]],[-1,-1,[]],[-1,44,[[11,[6]]]],[88,42],[[[87,[21]]],42],[-1,-1,[]],[[[90,[21]]],42],[[[91,[21]]],42],[21,42],[[[85,[21]]],42],[[[86,[21]]],42],[[[26,[-1]]],[[51,[-1]]],[]],[93,-1,[]],[-1,-1,[]],[-1,[[51,[-1]]],[]],[13,6],[13,6],[6,6],[-1,-1,[]],[10,6],[13,2],[-1,-1,[]],[13,2],[14,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,67,7],[-1,-1,[]],[-1,-1,[]],[-1,[[68,[-2]]],[[94,[69]]],[[70,[69]],39,40,41]],[-1,[[71,[-2]]],[[94,[72]]],[[70,[72]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[47,83],[47,83],[44,[[26,[2]]]],[47,83],[47,83],[44,13],[44,[[0,[33]]]],[47,83],[47,83],[47,83],[[19,-1],15,48],[[42,-1],15,48],[[[51,[-1]],-2],15,95,48],[[6,-1],15,48],[[47,83],47],[[44,-1],44,[[3,[2]]]],[[44,8],44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[51,[-2]]],[],[]],[-1,[[51,[25]]],[]],[-1,[[51,[19]]],[]],[-1,[[51,[42]]],[]],[[[51,[-1]]],[[51,[-1]]],[]],[-1,[[51,[6]]],[]],[-1,[[51,[10]]],[]],[-1,[[51,[19]]],[]],[-1,[[51,[14]]],[]],[-1,[[51,[2]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[-1,[[51,[25]]],[]],[[47,83],47],[44,8],[[47,83],47],[[-1,-2],[[77,[-1,-2]]],[],[96,39]],[[44,13,8],8],[42,21],[42,21],[-1,25,89],[-1,44,[[11,[6]]]],[-1,42,[[11,[42]]]],[[],2],[[],62],[[],63],[[],64],[[],[[65,[-1]]],[66,39,40,41]],[-1,67,[[11,[67]]]],[[],[[68,[-1]]],[[70,[69]],39,40,41]],[[],[[71,[-1]]],[[70,[72]]]],[[],73],[[],74],[[],75],[[],76],[[],25],[[-1,1,[26,[4]],81],[[31,[23]]],[]],[[62,1,[26,[4]],81],[[31,[23]]]],[[63,1,[26,[4]],81],[[31,[23]]]],[[64,1,[26,[4]],81],[[31,[23]]]],[[67,1,[26,[4]],81],[[31,[14,23]]]],[[[77,[-1,-2]],1,[26,[4]],81],[[31,[23]]],89,[96,39,40,41]],[[-1,1,[26,[4]],81,59],[[31,[23]]],[]],[[-1,1,[26,[4]],27],[[31,[23]]],[]],[[62,1,[26,[4]],27],[[31,[23]]]],[[63,1,[26,[4]],27],[[31,[23]]]],[[64,1,[26,[4]],27],[[31,[23]]]],[[[65,[-1]],1,[26,[4]],27],[[31,[23]]],[66,39,40,41]],[[67,1,[26,[4]],27],[[31,[23]]]],[[[68,[-1]],1,[26,[4]],27],[[31,[23]]],[[70,[69]],39,40,41]],[[[71,[-1]],1,[26,[4]],27],[[31,[23]]],[[70,[72]],39,40,41]],[[73,1,[26,[4]],27],[[31,[23]]]],[[74,1,[26,[4]],27],[[31,[23]]]],[[75,1,[26,[4]],27],[[31,[23]]]],[[76,1,[26,[4]],27],[[31,[23]]]],[[[77,[-1,-2]],1,[26,[4]],27],[[31,[23]]],89,[96,39,40,41]],[[[78,[-1,-2]],1,[26,[4]],27],[[31,[23]]],89,[96,39,40,41]],[[60,1,[26,[4]],27],[[31,[23]]]],[[-1,1,[26,[4]],27,59],[[31,[23]]],[]],[[60,1,[26,[4]],27,59],[[31,[23]]]],[[19,19],[[26,[18]]]],[[[51,[-1]],[51,[-1]]],[[26,[18]]],97],[[6,6],[[26,[18]]]],[[2,2],[[26,[18]]]],[[],25],[[47,83],47],[[],47],[25,[[26,[[98,[33]]]]]],[-1,[[26,[[98,[33]]]]],[]],[[[65,[-1]]],[[26,[[98,[33]]]]],[66,39,40,41]],[67,[[26,[[98,[33]]]]]],[73,[[26,[[98,[33]]]]]],[74,[[26,[[98,[33]]]]]],[75,[[26,[[98,[33]]]]]],[[[77,[-1,-2]]],[[26,[[98,[33]]]]],89,[96,39,40,41]],[[[78,[-1,-2]]],[[26,[[98,[33]]]]],89,[96,39,40,41]],[[[68,[-1]],-2],[[68,[-1]]],[[70,[69]],39,40,41],[[94,[69]]]],[[[71,[-1]],-2],[[71,[-1]]],[[70,[72]]],[[94,[72]]]],[42,[[80,[21]]]],[[],25],[[],47],0,[-1,60,[[11,[2]]]],[-1,60,[[11,[6]]]],[42,8],[19,81],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[-1,-2],[[78,[-1,-2]]],[],[96,39,40,41]],[25,99],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[47,83],47],[[47,83],47],[[]],[[2,34],[[31,[15,30]]]],[[2,13],[[31,[15,30]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[100,35],[[83,[26,[101]]],83],[[102,102],102],[[83,102],83],[[102,102],15],[[83,102],15],[83,83],[83,83],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[103,8],103],[102,102],[101,101],[103,103],[104,104],[100,100],[102,102],[105,105],[106,106],[83,83],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[101,101],18],[[103,103],18],[[104,104],18],[[100,100],18],[[102,102],18],[[106,106],18],[[83,83],18],[[102,102],8],[[],102],[[],106],[[],83],[83,83],[[83,102],83],[[101,101],8],[[103,103],8],[[104,104],8],[[100,100],8],[[102,102],8],[[105,105],8],[[106,106],8],[[83,83],8],[[83,102],8],[[83,[26,[101]]],83],[[101,29],[[31,[15,30]]]],[[103,29],[[31,[15,30]]]],[[104,29],[[31,[15,30]]]],[[100,29],[[31,[15,30]]]],[[102,29],[[31,[15,30]]]],[[105,29],[[31,[15,30]]]],[[106,29],[[31,[15,30]]]],[[106,29],[[31,[15,30]]]],[[83,29],[[31,[15,30]]]],[[83,29],[[31,[15,30]]]],[[[15,[35,35,35]]],101],[104,101],[35,101],[103,101],[100,101],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[35,104],[103,104],[-1,-1,[]],[[[15,[35,35,35]]],100],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[102,83],[-1,-1,[]],[103,104],[100,35],[83,[[26,[101]]]],[83,102],[83,[[26,[101]]]],[83,[[26,[101]]]],[[101,-1],15,48],[[103,-1],15,48],[[104,-1],15,48],[[100,-1],15,48],[[102,-1],15,48],[[106,-1],15,48],[[83,-1],15,48],[83,83],[104,35],[[102,102],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[104,[[26,[103]]]],[-1,-2,[],[]],[83,83],[103,8],[102,8],[83,8],[83,83],[102,105],[[],102],[[],83],[105,26],[[101,-1],83,[[11,[101]]]],[[103,-1],83,[[11,[101]]]],[[104,-1],83,[[11,[101]]]],[[100,-1],83,[[11,[101]]]],[101,83],[103,83],[104,83],[100,83],[[101,101],[[26,[18]]]],[[103,103],[[26,[18]]]],[[104,104],[[26,[18]]]],[[100,100],[[26,[18]]]],[[102,102],[[26,[18]]]],[[106,106],[[26,[18]]]],[[83,83],[[26,[18]]]],[100,35],[[102,102],102],[102,[[0,[24,107,39]]]],[106,[[0,[24,107,39]]]],[83,[[0,[24,107,39]]]],[101,[[0,[24,107,39]]]],[103,[[0,[24,107,39]]]],[104,[[0,[24,107,39]]]],[100,[[0,[24,107,39]]]],[101,[[0,[24,107,39]]]],[103,[[0,[24,107,39]]]],[104,[[0,[24,107,39]]]],[100,[[0,[24,107,39]]]],[83,[[0,[24,107,39]]]],[[102,102,8],102],[83,83],[[102,102],102],[[83,102],83],[[102,102],15],[[83,102],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[83,83],[[83,[26,[101]]],83],[[83,108],[[31,[15,54]]]],[[83,108],[[31,[15,54]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[23,[-1]]],[[23,[-2]]],109,109],[110,[[26,[13]]]],[22,[[26,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[110,110],[111,111],[22,22],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[[23,[-1]]],[[0,[33]]],109],[[110,110],8],[[111,111],8],[[22,22],8],[[[23,[-1]]],93,109],[[[23,[-1]]],112,109],[[[23,[-1]],29],[[31,[15,30]]],109],[[[23,[-1]],29],[[31,[15,30]]],109],[[110,29],[[31,[15,30]]]],[[110,29],[[31,[15,30]]]],[[111,29],[[31,[15,30]]]],[[111,29],[[31,[15,30]]]],[[22,29],[[31,[15,30]]]],[[22,29],[[31,[15,30]]]],[[[23,[-1]],1],[[23,[-1]]],109],[[[23,[-1]]],2,[]],[[[23,[113]]],2],[23,2],[-1,-1,[]],[-1,-1,[]],[30,[[23,[-1]]],109],[54,[[23,[-1]]],109],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[23,[-1]],110],[[26,[111]]],109],[[110,-1],15,48],[[22,-1],15,48],[[[23,[-1]],110,111],[[26,[111]]],109],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],22,109],[22,[[23,[-1]]],109],[[[23,[-1]]],[[31,[15,54]]],109],[[22,-1],[[23,[-2]]],24,109],[[[23,[-1]]],2,109],[[[23,[-1]]],[[26,[114]]],109],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[[23,[-1]]],8,109],[[[23,[-1]],1],[[23,[-1]]],109],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[49,49],[[[55,[-1]]],[[55,[-1]]],39],[[[37,[-1]]],[[37,[-1]]],39],[45,45],[50,50],[59,59],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[59,59],18],[[],[[55,[-1]]],[]],[[],[[37,[-1]]],[]],[[],45],[[],50],[[59,59],8],[[57,29],[[31,[15,30]]]],[[57,29],[[31,[15,30]]]],[[49,29],[[31,[15,30]]]],[[[55,[-1]],29],[[31,[15,30]]],84],[[[37,[-1]],29],[[31,[15,30]]],84],[[45,29],[[31,[15,30]]]],[[50,29],[[31,[15,30]]]],[[59,29],[[31,[15,30]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,[[26,[10]]]],[[[55,[-1]]],26,[]],[[[37,[-1]]],26,[]],[45,[[26,[27]]]],[50,[[26,[21]]]],[49,[[26,[10]]]],[[[55,[-1]]],26,[]],[[[37,[-1]]],26,[]],[45,[[26,[27]]]],[50,[[26,[21]]]],[[59,59],[[26,[18]]]],[49,[[15,[21,[26,[21]]]]]],[[[55,[-1]]],[[15,[21,[26,[21]]]]],[]],[[[37,[-1]]],[[15,[21,[26,[21]]]]],[]],[45,[[15,[21,[26,[21]]]]]],[50,[[15,[21,[26,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0],"c":[],"p":[[3,"Command",0],[3,"StyledStr",500],[8,"IntoResettable",500],[3,"Arg",0],[4,"ArgAction",0],[3,"Str",500],[8,"IntoIterator",1542],[15,"bool"],[3,"ArgGroup",0],[3,"Id",0],[8,"Into",1543],[3,"ArgMatches",0],[15,"str"],[3,"String",1544],[15,"tuple"],[4,"ValueHint",0],[4,"ColorChoice",0],[4,"Ordering",1545],[3,"OsStr",500],[4,"ArgPredicate",500],[15,"usize"],[4,"ErrorKind",1279],[3,"Error",1279],[8,"Display",1546],[3,"ValueParser",500],[4,"Option",1547],[3,"OsStr",1548],[8,"AsRef",1543],[3,"Formatter",1546],[3,"Error",1546],[4,"Result",1549],[3,"Vec",1550],[8,"Iterator",1551],[15,"char"],[15,"u8"],[15,"slice"],[3,"ValuesRef",1421],[8,"Any",1552],[8,"Clone",1553],[8,"Send",1554],[8,"Sync",1554],[3,"ValueRange",500],[3,"OccurrencesRef",1555],[3,"PossibleValue",500],[3,"RawValues",1421],[3,"RawOccurrences",1555],[3,"Styles",500],[8,"Hasher",1556],[3,"IdsRef",1421],[3,"Indices",1421],[4,"Resettable",500],[8,"FnOnce",1557],[8,"FnMut",1557],[3,"Error",1558],[3,"Values",1421],[3,"Occurrences",1555],[4,"MatchesError",1421],[3,"TypeId",1552],[4,"ValueSource",1421],[3,"UnknownArgumentValueParser",500],[3,"Path",1559],[3,"StringValueParser",500],[3,"OsStringValueParser",500],[3,"PathBufValueParser",500],[3,"EnumValueParser",500],[8,"ValueEnum",0],[3,"PossibleValuesParser",500],[3,"RangedI64ValueParser",500],[15,"i64"],[8,"TryFrom",1543],[3,"RangedU64ValueParser",500],[15,"u64"],[3,"BoolValueParser",500],[3,"FalseyValueParser",500],[3,"BoolishValueParser",500],[3,"NonEmptyStringValueParser",500],[3,"MapValueParser",500],[3,"TryMapValueParser",500],[8,"Ord",1545],[4,"Bound",1560],[3,"OsString",1548],[8,"PartialEq",1545],[3,"Style",1039],[8,"Debug",1546],[3,"RangeInclusive",1560],[3,"RangeToInclusive",1560],[3,"RangeTo",1560],[3,"RangeFull",1560],[8,"TypedValueParser",500],[3,"Range",1560],[3,"RangeFrom",1560],[15,"array"],[15,"never"],[8,"RangeBounds",1560],[8,"Hash",1556],[8,"Fn",1557],[8,"PartialOrd",1545],[3,"Box",1561],[3,"AnyValueId",1562],[3,"RgbColor",1039],[4,"Color",1039],[3,"Effects",1039],[4,"AnsiColor",1039],[3,"Ansi256Color",1039],[3,"EffectIter",1039],[3,"Reset",1039],[8,"Copy",1554],[8,"Write",1563],[8,"ErrorFormatter",1279],[4,"ContextKind",1279],[4,"ContextValue",1279],[15,"i32"],[3,"KindFormatter",1279],[8,"Error",1564],[8,"Args",0],[8,"Subcommand",0],[8,"CommandFactory",0],[8,"FromArgMatches",0],[8,"Parser",0],[8,"ValueParserFactory",500],[6,"Result",1279],[3,"DefaultFormatter",1279],[13,"Downcast",1540]],"b":[[146,"impl-PartialEq%3Cstr%3E-for-Id"],[147,"impl-PartialEq%3C%26str%3E-for-Id"],[148,"impl-PartialEq%3CStr%3E-for-Id"],[149,"impl-PartialEq%3CString%3E-for-Id"],[150,"impl-PartialEq-for-Id"],[160,"impl-Display-for-Arg"],[161,"impl-Debug-for-Arg"],[163,"impl-Debug-for-Command"],[164,"impl-Display-for-Command"],[167,"impl-Debug-for-Id"],[168,"impl-Display-for-Id"],[169,"impl-Debug-for-ColorChoice"],[170,"impl-Display-for-ColorChoice"],[180,"impl-From%3C%26Str%3E-for-Id"],[181,"impl-From%3C%26%26str%3E-for-Id"],[182,"impl-From%3C%26str%3E-for-Id"],[183,"impl-From%3CStr%3E-for-Id"],[184,"impl-From%3C%26Id%3E-for-Id"],[566,"impl-AsRef%3CPath%3E-for-OsStr"],[567,"impl-AsRef%3COsStr%3E-for-OsStr"],[568,"impl-AsRef%3COsStr%3E-for-Str"],[569,"impl-AsRef%3CPath%3E-for-Str"],[570,"impl-AsRef%3C%5Bu8%5D%3E-for-Str"],[571,"impl-AsRef%3Cstr%3E-for-Str"],[676,"impl-Default-for-StyledStr"],[677,"impl-Default-for-%26StyledStr"],[688,"impl-Default-for-%26Styles"],[689,"impl-Default-for-Styles"],[694,"impl-PartialEq-for-OsStr"],[695,"impl-PartialEq%3C%26OsStr%3E-for-OsStr"],[696,"impl-PartialEq%3CString%3E-for-OsStr"],[697,"impl-PartialEq%3COsString%3E-for-OsStr"],[698,"impl-PartialEq%3Cstr%3E-for-OsStr"],[699,"impl-PartialEq%3C%26str%3E-for-OsStr"],[703,"impl-PartialEq-for-Str"],[704,"impl-PartialEq%3CId%3E-for-Str"],[705,"impl-PartialEq%3C%26str%3E-for-Str"],[706,"impl-PartialEq%3COsStr%3E-for-Str"],[707,"impl-PartialEq%3CString%3E-for-Str"],[708,"impl-PartialEq%3C%26OsStr%3E-for-Str"],[709,"impl-PartialEq%3Cstr%3E-for-Str"],[716,"impl-Display-for-ValueRange"],[717,"impl-Debug-for-ValueRange"],[719,"impl-Debug-for-Str"],[720,"impl-Display-for-Str"],[721,"impl-Display-for-StyledStr"],[722,"impl-Debug-for-StyledStr"],[738,"impl-From%3CRangeInclusive%3Ci64%3E%3E-for-ValueParser"],[739,"impl-From%3CRangeToInclusive%3Ci64%3E%3E-for-ValueParser"],[740,"impl-From%3CRangeTo%3Ci64%3E%3E-for-ValueParser"],[741,"impl-From%3CRangeFull%3E-for-ValueParser"],[742,"impl-From%3CP%3E-for-ValueParser"],[744,"impl-From%3CRange%3Ci64%3E%3E-for-ValueParser"],[745,"impl-From%3CRangeFrom%3Ci64%3E%3E-for-ValueParser"],[746,"impl-From%3CVec%3CP%3E%3E-for-ValueParser"],[747,"impl-From%3C%5BP;+C%5D%3E-for-ValueParser"],[750,"impl-From%3CStr%3E-for-OsStr"],[751,"impl-From%3C%26OsStr%3E-for-OsStr"],[752,"impl-From%3C%26%26str%3E-for-OsStr"],[753,"impl-From%3C%26Str%3E-for-OsStr"],[754,"impl-From%3C%26OsStr%3E-for-OsStr"],[755,"impl-From%3C%26%26OsStr%3E-for-OsStr"],[756,"impl-From%3C%26str%3E-for-OsStr"],[760,"impl-From%3CRangeFull%3E-for-ValueRange"],[761,"impl-From%3CRangeTo%3Cusize%3E%3E-for-ValueRange"],[763,"impl-From%3CRange%3Cusize%3E%3E-for-ValueRange"],[764,"impl-From%3CRangeFrom%3Cusize%3E%3E-for-ValueRange"],[765,"impl-From%3Cusize%3E-for-ValueRange"],[766,"impl-From%3CRangeInclusive%3Cusize%3E%3E-for-ValueRange"],[767,"impl-From%3CRangeToInclusive%3Cusize%3E%3E-for-ValueRange"],[768,"impl-From%3COption%3CT%3E%3E-for-Resettable%3CT%3E"],[771,"impl-From%3CT%3E-for-Resettable%3CT%3E"],[772,"impl-From%3C%26%26str%3E-for-Str"],[773,"impl-From%3C%26str%3E-for-Str"],[774,"impl-From%3C%26Str%3E-for-Str"],[776,"impl-From%3CId%3E-for-Str"],[777,"impl-From%3C%26%26str%3E-for-StyledStr"],[779,"impl-From%3C%26str%3E-for-StyledStr"],[780,"impl-From%3C%26String%3E-for-StyledStr"],[781,"impl-From%3CString%3E-for-StyledStr"],[1141,"impl-PartialEq-for-Style"],[1142,"impl-PartialEq%3CEffects%3E-for-Style"],[1150,"impl-Display-for-Reset"],[1151,"impl-Debug-for-Reset"],[1152,"impl-Debug-for-Style"],[1153,"impl-Display-for-Style"],[1154,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[1155,"impl-From%3CAnsi256Color%3E-for-Color"],[1156,"impl-From%3Cu8%3E-for-Color"],[1157,"impl-From%3CAnsiColor%3E-for-Color"],[1158,"impl-From%3CRgbColor%3E-for-Color"],[1162,"impl-From%3Cu8%3E-for-Ansi256Color"],[1163,"impl-From%3CAnsiColor%3E-for-Ansi256Color"],[1358,"impl-Display-for-Error%3CF%3E"],[1359,"impl-Debug-for-Error%3CF%3E"],[1360,"impl-Debug-for-ContextKind"],[1361,"impl-Display-for-ContextKind"],[1362,"impl-Display-for-ContextValue"],[1363,"impl-Debug-for-ContextValue"],[1364,"impl-Display-for-ErrorKind"],[1365,"impl-Debug-for-ErrorKind"],[1372,"impl-From%3CError%3E-for-Error%3CF%3E"],[1373,"impl-From%3CError%3E-for-Error%3CF%3E"],[1468,"impl-Display-for-MatchesError"],[1469,"impl-Debug-for-MatchesError"]]},\
"clap_builder":{"doc":"clap_builder","t":"NCCCCINECIGIDNIIICOLLKKKKLLLLLALLLLLKOKLLLLLLLLALLLLLLLLLLLKLLLLLLLKLLLLLLLLLLALLLLKLLLLLLLLLLLLLLLLLKLLOKLNNDEDEDDDNNNNNSNDNNDNNNNNINDDDDNQDDDDDNESNNNDDDCDINDNNNQEDIDNCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLNNDESSNNNNNNNNNNSENSSSSDDNSSSNNDNDSDDSNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNEENCNNNNDIENNNNNNNNNDNNNNNNNNGDNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNNDDEDNEDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["Always","Arg","ArgAction","ArgGroup","ArgMatches","Args","Auto","ColorChoice","Command","CommandFactory","Error","FromArgMatches","Id","Never","Parser","Subcommand","ValueEnum","ValueHint","arg","as_ref","as_str","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","cmp","command","command","command_for_update","default","default","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_str","from_str","from_str","group_id","group_id","has_subcommand","hash","into","into","into_resettable","into_resettable","into_resettable","parse","parse","parse_from","parse_from","parser","partial_cmp","possible_values","to_owned","to_owned","to_possible_value","to_possible_value","to_string","to_string","try_from","try_from","try_into","try_into","try_parse","try_parse","try_parse_from","try_parse_from","try_update_from","try_update_from","type_id","type_id","update_from","update_from","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value_parser","value_variants","value_variants","AnyPath","Append","Arg","ArgAction","ArgGroup","ArgPredicate","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DirPath","EMPTY","EmailAddress","EnumValueParser","Equals","ExecutablePath","FalseyValueParser","FilePath","Help","HelpLong","HelpShort","Hostname","IntoResettable","IsPresent","MapValueParser","NonEmptyStringValueParser","OsStr","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","RangedI64ValueParser","RangedU64ValueParser","Reset","Resettable","SINGLE","Set","SetFalse","SetTrue","Str","StringValueParser","StyledStr","Styles","TryMapValueParser","TypedValueParser","Unknown","UnknownArgumentValueParser","Url","Username","Value","Value","ValueHint","ValueParser","ValueParserFactory","ValueRange","Version","_AnonymousValueParser","_AutoValueParser","about","action","after_help","after_long_help","alias","alias","alias","aliases","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_missing_positional","allow_negative_numbers","and_suggest","ansi","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","as_os_str","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","author","before_help","before_long_help","bin_name","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","debug_assert","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_ifs","default_values","defer","deref","deref","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_delimit_trailing_values","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","exclusive","external_subcommand_value_parser","find_subcommand","find_subcommand_mut","flatten_help","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_args","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_default_values","get_display_name","get_external_subcommand_value_parser","get_groups","get_help","get_help","get_help_heading","get_id","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_matches","get_matches_from","get_matches_mut","get_name","get_name","get_name_and_aliases","get_next_help_heading","get_num_args","get_opts","get_positionals","get_possible_values","get_short","get_short_and_visible_aliases","get_short_flag","get_styles","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_value_terminator","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_short_aliases","get_visible_short_flag_aliases","global","group","group","groups","groups","has_subcommands","hash","hash","hash","hash","hash","help","help","help_expected","help_heading","help_template","hide","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ignore_case","ignore_errors","index","index","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","into_resettable","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_flatten_help_set","is_global_set","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_required_set","is_required_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_trailing_var_arg_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","map","map","matches","max_term_width","max_values","min_values","multicall","multiple","mut_arg","mut_args","mut_group","mut_subcommand","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","num_args","os_string","override_help","override_usage","overrides_with","overrides_with_all","parse","parse","parse","parse","parse","parse","parse","parse_","parse_","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref_","parse_ref_","parse_ref_","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_buf","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","print_help","print_long_help","propagate_version","range","range","raw","render_help","render_long_help","render_long_version","render_usage","render_version","require_equals","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_if","requires_ifs","set_bin_name","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","start_bound","string","styles","styling","subcommand","subcommand_help_heading","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","suggest","suggest_arg","takes_values","takes_values","term_width","to_os_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","trailing_var_arg","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","try_map","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_terminator","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","write_char","write_str","Ansi","Ansi256","Ansi256Color","AnsiColor","BLINK","BOLD","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CURLY_UNDERLINE","Color","Cyan","DASHED_UNDERLINE","DIMMED","DOTTED_UNDERLINE","DOUBLE_UNDERLINE","EffectIter","Effects","Green","HIDDEN","INVERT","ITALIC","Magenta","Red","Reset","Rgb","RgbColor","STRIKETHROUGH","Style","Styles","UNDERLINE","White","Yellow","b","bg_color","bitor","bitor","bitor_assign","bitor_assign","blink","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","contains","default","default","default","default","default","dimmed","effects","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fg_color","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ansi","g","get_bg_color","get_effects","get_error","get_fg_color","get_header","get_invalid","get_literal","get_placeholder","get_underline_color","get_usage","get_valid","hash","hash","hash","hash","hash","hash","hash","header","hidden","index","insert","into","into","into","into","into","into","into","into","into","into_ansi","into_iter","invalid","invert","is_bright","is_plain","is_plain","italic","iter","literal","new","new","next","on","on","on","on","on_default","on_default","on_default","on_default","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","placeholder","plain","r","remove","render","render","render","render_bg","render_bg","render_bg","render_bg","render_fg","render_fg","render_fg","render_fg","render_reset","set","strikethrough","styled","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline_color","usage","valid","write_reset_to","write_to","ActualNumValues","ArgumentConflict","Bool","ContextKind","ContextValue","Custom","DefaultFormatter","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","Err","Error","ErrorFormatter","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","KindFormatter","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","Ok","PriorArg","Result","RichFormatter","String","Strings","StyledStr","StyledStrs","Suggested","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyValues","TrailingArg","UnknownArgument","Usage","ValidSubcommand","ValidValue","ValueValidation","WrongNumberOfValues","apply","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","exit","exit_code","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_error","format_error","format_error","from","from","from","from","from","from","from","from","get","hash","hash","insert","into","into","into","into","into","into","kind","new","print","raw","render","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_stderr","with_cmd","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","IdsRef","Indices","MatchesError","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","args_present","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_id","default","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_count","get_flag","get_many","get_occurrences","get_one","get_raw","get_raw_occurrences","ids","index_of","indices_of","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","remove_many","remove_occurrences","remove_one","remove_subcommand","size_hint","size_hint","size_hint","size_hint","size_hint","subcommand","subcommand_matches","subcommand_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_occurrences","try_get_one","try_get_raw","try_get_raw_occurrences","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_remove_many","try_remove_occurrences","try_remove_one","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_source","actual","expected"],"q":[[0,"clap_builder"],[107,"clap_builder::builder"],[964,"clap_builder::builder::styling"],[1233,"clap_builder::error"],[1375,"clap_builder::parser"],[1536,"clap_builder::parser::MatchesError"],[1538,"core::cmp"],[1539,"alloc::string"],[1540,"core::fmt"],[1541,"core::fmt"],[1542,"core::option"],[1543,"core::hash"],[1544,"core::iter::traits::collect"],[1545,"core::iter::traits::iterator"],[1546,"core::any"],[1547,"core::convert"],[1548,"core::fmt"],[1549,"std::path"],[1550,"core::clone"],[1551,"core::marker"],[1552,"core::marker"],[1553,"std::ffi::os_str"],[1554,"core::ops::range"],[1555,"core::ops::function"],[1556,"std::io::error"],[1557,"core::marker"],[1558,"std::io::error"],[1559,"core::any"]],"d":["Enables colored output regardless of whether or not the …","","","","","Parse a set of arguments into a user-defined container.","Enables colored output only when the output is going to a …","Represents the color preferences for program output","","Create a <code>Command</code> relevant for a user-defined container.","Command Line Argument Parser Error","Converts an instance of <code>ArgMatches</code> to a user-defined …","<code>Arg</code> or <code>ArgGroup</code> identifier","Disables colored output no matter if the output is going …","Parse command-line arguments into <code>Self</code>.","Parse a sub-command into a user-defined enum.","Parse arguments into enums.","","Create an <code>Arg</code> from a usage string.","","Get the raw string of the <code>Id</code>","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","","","","","","Define <code>Command</code> line arguments","","","","","","Build a <code>Command</code> that can instantiate <code>Self</code>.","Requires <code>cargo</code> feature flag to be enabled.","Build a <code>Command</code> that can update <code>self</code>.","","","","","","","","","Error reporting","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","Parse an argument into <code>Self</code>.","","Report the <code>ArgGroup::id</code> for this set of arguments","Report the <code>ArgGroup::id</code> for this set of arguments","Test whether <code>Self</code> can parse a specific subcommand","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Parse from <code>std::env::args_os()</code>, exit on error.","Parse from <code>std::env::args_os()</code>, exit on error.","Parse from iterator, exit on error.","Parse from iterator, exit on error.","<code>Command</code> line argument parser","","Report all <code>possible_values</code>","","","The canonical argument value.","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","Update from iterator, return Err on error.","","","Update from iterator, exit on error.","Update from iterator, exit on error.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Select a <code>ValueParser</code> implementation from the intended type","All possible argument values, in display order.","","Any existing path.","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Operations to perform on argument values","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Path to a directory.","Nor argument values, or a flag","Email address.","Parse an <code>ValueEnum</code> value.","Does the argument match the specified value?","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","When encountered, display <code>Command::print_help</code>","When encountered, display <code>Command::print_long_help</code>","When encountered, display <code>Command::print_help</code>","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Convert to the intended resettable type","Is the argument present?","Adapt a <code>TypedValueParser</code> from one value to another","Parse non-empty string values","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Parse number that fall within a range of values","Parse number that fall within a range of values","Reset builder value","Clearable builder value","A single argument value, the most common case for options","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","A UTF-8-encoded fixed string","Implementation for <code>ValueParser::string</code>","Terminal-styling container","","Adapt a <code>TypedValueParser</code> from one value to another","Parse/validate argument values","Default value if hint is not specified. Follows shell …","When encountered, report ErrorKind::UnknownArgument","Complete web address.","Name of a local operating system user.","Overwrite builder value","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","Values per occurrence for an argument","When encountered, display <code>Command::version</code>","","","Sets the program’s description for the short help (<code>-h</code>).","Specify how to react to an argument when parsing it.","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Sets a <em>hidden</em> alias for this argument value.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Sets multiple <em>hidden</em> aliases for this argument value.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Extend the suggestions","Display using ANSI Escape Code styling","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Replace prior occurrences of arguments rather than error","Get the raw string as an <code>std::ffi::OsStr</code>","","","","","","","Get the raw string of the <code>Str</code>","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets when to color output.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Catch problems earlier in the development cycle.","","","","","","","","","","","","","","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Specifies multiple values and conditions in the same …","Value for the argument when not present.","Delay initialization for parts of the <code>Command</code>","","","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","","","","","","","","","","","","","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Specifies how to parse external subcommand arguments.","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","Flatten subcommand help into the current command’s help","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Getters for all args. It will return a vector of <code>Id</code>","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Get the name of the argument","Get the name of the group","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Get the name of the cmd.","Get the name of the argument value","Returns all valid values of the argument value.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Get the names of possible values for this argument. Only …","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Return the current <code>Styles</code> for the <code>Command</code>","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the value terminator for this argument. The …","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Returns <code>true</code> if this <code>Command</code> has subcommands.","","","","","","Sets the description of the argument for short help (<code>-h</code>).","Sets the help description of the value.","Panic if help descriptions are omitted.","Override the current help section.","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Hides this value from help and shell completions.","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Match values against <code>PossibleValuesParser</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to the intended resettable type","","","","","","","","","","","","","","","","","","","","","","","","","","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Arg::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Get the custom section heading specified via …","Report whether <code>Arg::global</code> is set","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report if <code>PossibleValue::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","Return true if the group allows more than one of the …","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Reports whether <code>Arg::required</code> is set","Reports whether <code>ArgGroup::required</code> is set","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::trailing_var_arg</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Limit the line length for wrapping help when using the …","Most number of values the argument accepts","Fewest number of values the argument accepts","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate all <code>Arg</code>s after they’ve been added …","Allows one to mutate an <code>ArgGroup</code> after it’s been added …","Allows one to mutate a <code>Command</code> after it’s been added as …","(Re)Sets the program’s name.","Custom parser for argument values","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Create a <code>PossibleValue</code> with its name.","Create a range","Create an empty buffer","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","Specifies the number of arguments parsed per occurrence","<code>OsString</code> parser for argument values","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse the argument value","Parse the argument value","","","","","","Parse the argument value","Parse the argument value","Parse the argument value","","","","","","","","","","","","","","","Parse the argument value","Parse the argument value","","","","","","","<code>PathBuf</code> parser for argument values","Reflect on enumerated value properties","Reflect on enumerated value properties","Reflect on enumerated value properties","","","","","","","","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Narrow the supported range","Narrow the supported range","Consume all following arguments.","Render the short help message (<code>-h</code>) to a <code>StyledStr</code>","Render the long help message (<code>--help</code>) to a <code>StyledStr</code>.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Requires that options use the <code>--option=val</code> syntax","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Specify arguments or groups that must be present when this …","Require another argument if this arg matches the …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","","<code>String</code> parser for argument values","Sets the <code>Styles</code> for terminal output","Terminal <code>Styles</code> for help and error output","Adds a subcommand to the list of valid possibilities.","Sets the help heading used for subcommands when printing …","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Provide a general suggestion","Suggest an alternative argument","Returns whether this action accepts values on the …","Report whether the argument takes any values (ie is a flag)","Sets the terminal width at which to wrap help messages.","Get the raw string as an <code>OsString</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a “VarArg” and everything that follows should …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Allow grouping of multiple values via a delimiter.","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Create the specified <code>Self::Parser</code>","Specify the typed behavior of the argument.","Sentinel to <strong>stop</strong> parsing multiple values of a given …","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","","","","","256 (8-bit) color support","Available 4-bit ANSI color palette codes","","","Black: #0 (foreground code <code>30</code>, background code <code>40</code>).","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Bright black: #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright red: #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright white: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","","Any ANSI color code scheme","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","","","","","","A set of text effects","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","","Swap foreground and background colors; inconsistent …","Not widely supported. Sometimes treated as inverse or blink","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Red: #1 (foreground code <code>31</code>, background code <code>41</code>).","Reset terminal formatting","","24-bit ANSI RGB color codes","Characters legible but marked as if for deletion. Not …","ANSI Text styling","Terminal styling definitions","Style extensions exist for Kitty, VTE, mintty and iTerm2.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","","Set background color","","","","","Apply <code>blink</code> effect","Apply <code>bold</code> effect","","","","","","","","","","","","","","","","","","","Change the color to/from bright","Reset all effects in-place","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all of the effects in <code>other</code> are contained …","","","","","","Apply <code>dimmed</code> effect","Set text effects","","","","","","","","","","Error heading","Set foreground color","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Error heading","","General Heading style, e.g. <code>help_heading</code>","Highlight invalid usage","Literal command-line syntax, e.g. <code>--help</code>","Descriptions within command-line syntax, e.g. <code>value_name</code>","","Usage heading","Highlight suggested usage","","","","","","","","General Heading style, e.g. <code>help_heading</code>","Apply <code>hidden</code> effect","","Inserts the specified effects in-place.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Highlight invalid usage","Apply <code>invert</code> effect","Report whether the color is bright","Check if no effects are enabled","Check if no effects are enabled","Apply <code>italic</code> effect","Iterate over enabled effects","Literal command-line syntax, e.g. <code>--help</code>","No effects enabled","No effects enabled","","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","Create a <code>Style</code> with this as the foreground","","","","","","","","Descriptions within command-line syntax, e.g. <code>value_name</code>","No terminal styling","","Removes the specified effects in-place.","Render the ANSI code","Render the ANSI code","Render the ANSI code","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a background color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Render the ANSI code for a foreground color","Renders the relevant <code>Reset</code> code","Enable or disable the specified effects depending on the …","Apply <code>strikethrough</code> effect","Default terminal styling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply <code>underline</code> effect","Set underline color","Usage heading","Highlight suggested usage","Write the relevant <code>Reset</code> code","Write the ANSI code","Number of values present","Occurs when the user provides two values which conflict …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Contains the error value","Command Line Argument Parser Error","Defines how to format an error for displaying to the user","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Report <code>ErrorKind</code>","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Contains the success value","Existing arguments","Short hand for <code>Result</code> type","Richly formatted error context","A single value","Many values","A single value","many value","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when a user provides a flag, option, argument or …","A usage string","Accepted subcommands","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","Apply an alternative formatter to the error","End-user description of the error case, where relevant","End-user description of the error case, where relevant","","","","","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","Prints the error and exits.","Returns the exit code that <code>.exit</code> will exit the process …","","","","","","","","","Format the existing message with the Command’s context","Stylize the error for the terminal","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lookup a piece of context","","","Insert a piece of context","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Create an error with a pre-defined message","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","Create an unformatted error","Render the error message to a <code>StyledStr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","Apply <code>Command</code>’s formatting to the error","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Iterate over multiple values for an argument via …","Iterate over multiple values for an argument via …","Check if any args were present on the command line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if values are present for the argument or group id","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the value of a specific <code>ArgAction::Count</code> flag","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate over values of a specific option or positional …","Iterate over the values passed to each occurrence of an …","Gets the value of a specific option or positional argument.","Iterate over the original argument values.","Iterate over the original values for each occurrence of an …","Iterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Return values of a specific option or positional argument.","Return values for each occurrence of an option.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","","","","","","The name and <code>ArgMatches</code> of the current subcommand.","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","","","","","","","","","","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Non-panicking version of <code>ArgMatches::get_occurrences</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","Non-panicking version of <code>ArgMatches::get_raw_occurrences</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_occurrences</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","","","","","","","","","Report where argument value came from","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[4,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,1,1,116,116,117,117,1,1,4,1,4,0,1,4,1,4,1,118,0,118,1,4,1,1,1,1,1,4,0,1,1,4,4,1,1,1,1,1,1,4,119,119,119,44,44,4,116,116,117,1,1,4,1,1,1,120,120,120,120,0,1,4,1,4,44,4,1,4,1,4,1,4,120,120,120,120,120,120,1,4,120,120,119,119,119,0,44,4,39,26,0,0,0,0,0,0,0,39,39,39,26,39,37,39,0,36,39,0,39,26,26,26,39,0,36,0,0,0,0,39,121,0,0,0,0,0,17,0,37,26,26,26,0,0,0,0,0,0,39,0,39,39,17,70,0,0,0,0,26,0,0,3,25,3,3,25,3,20,25,3,20,3,25,3,25,27,23,30,3,3,30,3,3,3,31,31,31,9,9,9,9,9,3,3,3,3,35,35,26,25,30,36,3,31,31,20,37,17,9,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,3,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,25,31,17,9,23,3,25,30,25,30,3,25,30,3,31,20,37,9,23,23,39,40,41,42,43,48,51,53,54,55,56,25,25,25,25,25,25,25,25,3,31,9,3,3,3,3,3,25,3,3,37,25,30,36,31,31,31,31,31,31,20,37,17,9,9,9,9,9,9,9,23,39,3,25,3,3,3,3,35,26,25,25,30,36,3,3,31,20,37,37,17,9,9,23,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,35,35,35,35,35,35,35,35,35,35,26,25,25,30,30,36,36,3,3,31,31,31,31,31,31,31,31,20,20,37,37,37,37,37,37,37,37,17,17,17,17,9,9,9,9,9,23,23,23,23,23,39,40,41,42,43,47,47,48,48,51,51,53,54,55,56,57,58,27,39,3,25,3,3,25,3,3,25,3,3,30,3,3,3,3,3,3,25,3,3,3,25,20,25,25,30,25,25,3,25,3,25,3,3,3,3,3,20,20,3,25,3,3,25,25,25,3,3,3,3,3,3,25,25,25,25,25,3,25,3,3,25,3,25,25,3,25,3,3,31,37,17,9,39,25,20,3,25,3,25,3,20,25,25,25,3,25,25,30,25,3,25,3,3,3,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,24,35,26,31,37,17,9,9,9,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,3,25,3,25,3,3,3,3,3,3,3,25,3,25,25,25,25,25,3,20,25,25,25,3,30,25,3,3,25,3,25,25,30,3,3,3,25,25,25,3,3,3,3,25,3,70,70,20,3,37,37,3,30,3,3,3,3,3,35,25,30,3,20,37,23,40,41,42,43,47,48,51,53,54,55,56,3,3,25,3,3,25,35,3,3,25,25,70,70,40,41,42,47,57,70,70,70,40,41,42,43,47,48,51,53,54,55,56,57,58,27,70,70,27,25,31,17,9,23,35,35,70,70,43,47,53,54,55,57,58,3,3,3,48,51,25,3,3,3,3,3,25,25,30,25,25,25,25,25,25,25,30,30,25,25,3,25,25,25,3,3,3,37,35,3,0,3,3,3,3,3,3,3,27,27,26,37,3,31,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,25,3,37,9,23,25,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,3,3,3,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,70,70,35,35,26,25,30,36,3,31,20,37,17,9,23,39,40,41,42,43,47,48,51,53,54,55,56,57,58,27,25,25,25,25,121,25,25,3,25,3,25,3,3,3,25,25,3,3,23,23,92,92,0,0,93,93,94,94,94,94,94,94,94,94,94,94,93,0,94,93,93,93,93,0,0,94,93,93,93,94,94,0,92,0,93,0,0,93,94,94,90,91,93,91,93,91,91,91,92,94,95,90,93,96,97,91,80,92,94,95,90,93,96,97,91,80,94,93,92,94,95,90,93,96,97,91,80,92,94,95,90,93,96,97,91,80,92,94,95,90,93,97,91,93,93,97,91,80,80,91,91,92,94,95,90,93,96,97,91,91,80,91,92,94,95,90,93,96,97,97,91,91,80,92,92,92,92,92,92,94,95,95,95,90,90,93,96,97,91,91,80,95,90,91,91,80,91,80,80,80,80,91,80,80,92,94,95,90,93,97,91,80,91,95,93,92,94,95,90,93,96,97,91,80,95,96,80,91,94,93,91,91,93,80,93,91,96,92,94,95,90,92,94,95,90,92,94,95,90,93,97,91,80,80,90,93,93,97,91,92,94,95,90,92,94,95,90,91,93,91,80,93,91,93,91,92,94,95,90,93,96,97,91,80,97,91,92,94,95,90,93,96,97,91,80,92,94,95,90,93,96,97,91,80,92,94,95,90,93,96,97,91,80,91,91,80,80,91,91,103,64,104,0,0,103,0,64,64,64,89,0,0,0,103,64,103,103,64,64,103,64,64,0,103,64,64,64,104,104,89,103,0,0,104,104,104,104,103,103,103,103,103,64,64,103,64,103,103,103,64,64,101,103,64,106,107,101,103,104,64,106,107,101,103,104,64,103,104,64,103,104,64,101,103,104,64,101,101,101,101,103,103,104,104,64,64,101,102,106,107,106,107,101,101,101,103,104,64,101,103,64,101,106,107,101,103,104,64,101,101,101,101,101,101,103,104,64,101,103,104,64,106,107,101,103,104,64,106,107,101,103,104,64,106,107,101,103,104,64,101,101,0,85,85,109,85,0,0,0,0,109,0,0,0,12,109,12,110,111,112,113,114,85,109,12,110,111,112,113,114,85,109,12,110,111,112,113,114,85,109,12,110,111,112,113,114,85,85,12,12,111,112,113,114,12,85,109,109,12,110,111,112,113,114,85,109,12,110,111,112,113,114,85,12,12,12,12,12,12,12,12,12,12,109,12,110,111,112,113,114,85,110,111,112,113,114,110,111,112,113,114,110,111,112,113,114,85,12,12,12,12,110,111,112,113,114,12,12,12,109,12,110,111,112,113,114,85,109,12,109,12,110,111,112,113,114,85,12,12,12,12,12,109,12,110,111,112,113,114,85,12,12,12,109,12,110,111,112,113,114,85,12,122,122],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[3,3],[3,3],[3,3],[3,3],[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,1],6],[[],3],0,[[],3],[[],1],[[],4],[[1,2],7],[[1,8],7],[[1,2],7],[[1,9],7],[[1,1],7],[[4,4],7],0,[[1,10],11],[[1,10],11],[[4,10],11],[[4,10],11],[-1,-1,[]],[9,1],[2,1],[2,1],[9,1],[1,1],[-1,-1,[]],[12,[[14,[-1,13]]],[]],[12,[[14,[-1,13]]],[]],[12,[[14,[-1,13]]],[]],[[2,7],[[14,[-1,8]]],[]],[[2,7],[[14,[-1,8]]],[]],[2,[[14,[4]]]],[[],[[15,[1]]]],[[],[[15,[1]]]],[2,7],[[1,-1],5,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[8]]],[]],[-1,[[17,[1]]],[]],[-1,[[17,[9]]],[]],[[],-1,[]],[[],-1,[]],[-1,-2,18,[]],[-1,-2,18,[]],0,[[1,1],[[15,[6]]]],[[],[[0,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[20]]],[]],[4,[[15,[20]]]],[-1,8,[]],[-1,8,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[],[[14,[-1,13]]],[]],[[],[[14,[-1,13]]],[]],[-1,[[14,[-2,13]]],18,[]],[-1,[[14,[-2,13]]],18,[]],[[-1,-2],[[14,[5,13]]],[],18],[[-1,-2],[[14,[5,13]]],[],18],[-1,21,[]],[-1,21,[]],[[-1,-2],5,[],18],[[-1,-2],5,[],18],[[-1,12],[[14,[5,13]]],[]],[[-1,12],[[14,[5,13]]],[]],[[-1,12],[[14,[5,13]]],[]],0,[[],[[22,[-1]]],[]],[[],[[22,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,-1],3,[[24,[23]]]],[[25,-1],25,[[24,[26]]]],[[3,-1],3,[[24,[23]]]],[[3,-1],3,[[24,[23]]]],[[25,-1],25,[[24,[9]]]],[[3,-1],3,[[24,[9]]]],[[20,-1],20,[[24,[9]]]],[[25,-1],25,18],[[3,-1],3,18],[[20,-1],20,18],[[3,7],3],[[25,7],25],[[3,7],3],[[25,7],25],[[27,-1],27,[[28,[23]]]],[23,[[0,[29]]]],[[30,-1],30,[[24,[1]]]],[[3,-1],3,[[28,[25]]]],[[3,7],3],[[30,-1],30,18],[[3,-1],3,18],[[3,7],3],[[3,7],3],[31,32],[31,32],[31,33],[9,2],[9,32],[9,[[22,[34]]]],[9,33],[9,2],[[3,-1],3,[[24,[9]]]],[[3,-1],3,[[24,[23]]]],[[3,-1],3,[[24,[23]]]],[[3,-1],3,[[24,[8]]]],[[],35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,5],[35,35],[26,26],[25,25],[30,30],[36,36],[3,3],[31,31],[20,20],[37,37],[[[17,[-1]]],[[17,[-1]]],38],[9,9],[23,23],[39,39],[40,40],[41,41],[42,42],[[[43,[-1]]],[[43,[-1]]],[38,44,38,45,46]],[47,47],[[[48,[-1]]],[[48,[-1]]],[38,[50,[49]],38,45,46]],[[[51,[-1]]],[[51,[-1]]],[38,[50,[52]]]],[53,53],[54,54],[55,55],[56,56],[[[57,[-1,-2]]],[[57,[-1,-2]]],38,38],[[[58,[-1,-2]]],[[58,[-1,-2]]],38,38],[27,27],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[25,25],6],[[31,31],6],[[[17,[-1]],[17,[-1]]],6,59],[[9,9],6],[[23,23],6],[[3,4],3],[[25,-1],25,[[24,[1]]]],[[30,-1],30,[[24,[1]]]],[[25,-1],25,18],[[30,-1],30,18],[3,5],[[],25],[[],30],[[],3],[[],31],[[],20],[[],37],[[],9],[[],23],[[],23],[[],39],[[],40],[[],41],[[],42],[[],[[43,[-1]]],[44,38,45,46]],[[],[[48,[-1]]],[[50,[49]],38,45,46]],[[],[[51,[-1]]],[[50,[52]]]],[[],53],[[],54],[[],55],[[],56],[[25,-1],25,[[24,[31]]]],[[25,-1],25,[[28,[31]]]],[[25,-1],25,18],[[25,-1],25,18],[[25,-1],25,[[24,[31]]]],[[25,-1,-2,-3],25,[[28,[1]]],[[28,[36]]],[[24,[31]]]],[[25,-1],25,18],[[25,-1],25,18],[3,3],[31,32],[9,2],[[3,7],3],[[3,7],3],[[3,7],3],[[3,7],3],[[3,-1],3,[[24,[8]]]],[[25,-1],25,[[24,[60]]]],[[3,-1],3,[[24,[60]]]],[[3,7],3],[37,[[61,[60]]]],[[25,25],7],[[30,30],7],[[36,36],7],[[31,32],7],[[31,31],7],[[31,62],7],[[31,2],7],[[31,8],7],[[31,2],7],[[20,20],7],[[37,37],7],[[[17,[-1]],[17,[-1]]],7,63],[[9,32],7],[[9,9],7],[[9,2],7],[[9,1],7],[[9,32],7],[[9,8],7],[[9,2],7],[[23,23],7],[[39,39],7],[[3,64,-1],13,29],[[25,7],25],[[3,-1],3,[[24,[35]]]],[[3,-1],[[15,[3]]],[[65,[32]]]],[[3,-1],[[15,[3]]],[[65,[32]]]],[[3,7],3],[[35,10],[[14,[5,66]]]],[[26,10],11],[[25,10],[[14,[5,66]]]],[[25,10],11],[[30,10],11],[[36,10],11],[[3,10],11],[[3,10],11],[[31,10],11],[[20,10],11],[[37,10],11],[[37,10],11],[[[17,[-1]],10],11,67],[[9,10],11],[[9,10],11],[[23,10],11],[[23,10],11],[[39,10],11],[[40,10],11],[[41,10],11],[[42,10],11],[[[43,[-1]],10],11,[67,44,38,45,46]],[[47,10],11],[[[48,[-1]],10],11,[67,[50,[49]],38,45,46]],[[[51,[-1]],10],11,[67,[50,[52]]]],[[53,10],11],[[54,10],11],[[55,10],11],[[56,10],11],[[[57,[-1,-2]],10],11,67,67],[[[58,[-1,-2]],10],11,67,67],[[27,10],11],[[[68,[49]]],35],[69,35],[-1,-1,[]],[-1,35,[70,45,46]],[[[71,[-1]]],35,[[28,[20]]]],[[[72,[-1]]],35,[[28,[20]]]],[[[73,[49]]],35],[[[74,[49]]],35],[[[75,[49]]],35],[[[76,[49]]],35],[-1,-1,[]],[25,25],[-1,-1,[]],[-1,-1,[]],[30,30],[-1,36,[[28,[31]]]],[-1,-1,[]],[-1,-1,[]],[3,3],[9,31],[-1,-1,[]],[2,31],[2,31],[32,31],[9,31],[31,31],[32,31],[-1,20,[[28,[9]]]],[-1,-1,[]],[[[74,[60]]],37],[[[68,[60]]],37],[60,37],[[[76,[60]]],37],[[[75,[60]]],37],[69,37],[-1,-1,[]],[[[73,[60]]],37],[[[15,[-1]]],[[17,[-1]]],[]],[77,-1,[]],[-1,-1,[]],[-1,[[17,[-1]]],[]],[2,9],[9,9],[2,9],[1,9],[-1,-1,[]],[2,23],[2,23],[-1,-1,[]],[8,23],[8,23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,47,18],[-1,-1,[]],[-1,[[48,[-2]]],[[78,[49]]],[[50,[49]],38,45,46]],[-1,-1,[]],[-1,[[51,[-2]]],[[78,[52]]],[[50,[52]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[14,[39]]]],[3,[[15,[23]]]],[25,26],[3,[[15,[23]]]],[3,[[15,[23]]]],[25,[[15,[[72,[2]]]]]],[3,[[0,[19]]]],[3,[[0,[19]]]],[25,[[15,[[72,[79]]]]]],[3,[[0,[19]]]],[[3,25],[[72,[25]]]],[30,[[0,[19]]]],[3,[[0,[19]]]],[3,[[15,[2]]]],[3,[[15,[23]]]],[3,[[15,[23]]]],[3,[[15,[2]]]],[3,4],[25,[[22,[31]]]],[3,[[15,[2]]]],[3,[[15,[35]]]],[3,[[0,[19]]]],[25,[[15,[23]]]],[20,[[15,[23]]]],[25,[[15,[2]]]],[25,1],[30,1],[25,[[15,[60]]]],[25,[[15,[2]]]],[3,[[15,[23]]]],[25,[[15,[[72,[2]]]]]],[3,[[15,[2]]]],[25,[[15,[23]]]],[3,[[15,[2]]]],[3,12],[[3,-1],12,18],[3,12],[3,2],[20,2],[20,[[0,[19]]]],[3,[[15,[2]]]],[25,[[15,[37]]]],[3,[[0,[19]]]],[3,[[0,[19]]]],[25,[[72,[20]]]],[25,[[15,[79]]]],[25,[[15,[[72,[79]]]]]],[3,[[15,[79]]]],[3,80],[3,[[15,[2]]]],[3,[[15,[2]]]],[3,[[0,[19]]]],[3,[[0,[19]]]],[25,[[15,[79]]]],[25,39],[25,[[15,[[22,[9]]]]]],[25,35],[25,[[15,[9]]]],[3,[[15,[2]]]],[25,[[15,[[72,[2]]]]]],[3,[[0,[19]]]],[3,[[0,[19]]]],[25,[[15,[[72,[79]]]]]],[3,[[0,[19]]]],[[25,7],25],[[25,-1],25,[[24,[1]]]],[[3,-1],3,[[28,[30]]]],[[25,-1],25,18],[[3,-1],3,18],[3,7],[[31,-1],5,16],[[37,-1],5,16],[[[17,[-1]],-2],5,81,16],[[9,-1],5,16],[[39,-1],5,16],[[25,-1],25,[[24,[23]]]],[[20,-1],20,[[24,[23]]]],[[3,7],3],[[25,-1],25,[[24,[9]]]],[[3,-1],3,[[24,[23]]]],[[25,7],25],[[3,7],3],[[20,7],20],[[25,7],25],[[25,7],25],[[25,7],25],[[3,7],3],[[25,7],25],[[25,-1],25,[[28,[1]]]],[[30,-1],30,[[28,[1]]]],[[25,7],25],[[3,7],3],[[25,-1],25,[[24,[60]]]],[[3,1]],[[3,7],3],[[3,7],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[35]]],[]],[26,[[17,[26]]]],[-1,[[17,[31]]],[]],[-1,[[17,[37]]],[]],[[[17,[-1]]],[[17,[-1]]],[]],[-1,[[17,[31]]],[]],[-1,[[17,[1]]],[]],[-1,[[17,[8]]],[]],[-1,[[17,[9]]],[]],[-1,[[17,[23]]],[]],[39,[[17,[39]]]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[-1,[[17,[35]]],[]],[3,7],[25,7],[3,7],[25,7],[3,7],[3,7],[3,7],[3,7],[3,7],[3,7],[3,7],[25,7],[3,7],[25,7],[25,7],[25,7],[25,7],[25,7],[3,7],[20,7],[25,7],[25,7],[25,7],[3,7],[30,7],[25,7],[3,7],[3,7],[25,7],[3,7],[25,7],[25,7],[30,7],[3,7],[3,7],[3,7],[25,7],[[25,7],25],[[25,-1],25,[[24,[9]]]],[[3,-1],3,[[24,[23]]]],[[3,-1],3,[[28,[9]]]],[[3,-1],3,[[24,[9]]]],[[3,-1],3,18],[[25,-1],25,[[24,[23]]]],[[3,-1],3,[[24,[9]]]],[[-1,-2],[[57,[-1,-2]]],[],[82,38]],[[-1,-2],[[57,[-1,-2]]],[],[82,38]],[[20,2,7],7],[[3,60],3],[37,60],[37,60],[[3,7],3],[[30,7],30],[[3,-1,-2],3,[[65,[2]]],83],[[3,-1],3,84],[[3,-1,-2],3,[[65,[2]]],83],[[3,-1,-2],3,[[65,[2]]],83],[[3,-1],3,[[28,[9]]]],[-1,35,70],[-1,25,[[28,[1]]]],[-1,30,[[28,[1]]]],[-1,3,[[28,[9]]]],[-1,20,[[28,[9]]]],[-1,37,[[28,[37]]]],[[],23],[[],40],[[],41],[[],42],[[],[[43,[-1]]],[44,38,45,46]],[-1,47,[[28,[47]]]],[[],[[48,[-1]]],[[50,[49]],38,45,46]],[[],[[51,[-1]]],[[50,[52]]]],[[],53],[[],54],[[],55],[[],56],[[3,-1],3,[[24,[60]]]],[[3,-1],3,[[24,[9]]]],[[25,7],25],[[3,7],3],[[3,7],3],[[25,-1],25,[[24,[37]]]],[[],35],[[3,-1],3,[[24,[23]]]],[[3,-1],3,[[24,[23]]]],[[25,-1],25,[[24,[1]]]],[[25,-1],25,18],[[-1,3,[15,[25]],62],[[14,[13]]],[]],[[-1,3,[15,[25]],62],[[14,[13]]],[]],[[40,3,[15,[25]],62],[[14,[13]]]],[[41,3,[15,[25]],62],[[14,[13]]]],[[42,3,[15,[25]],62],[[14,[13]]]],[[47,3,[15,[25]],62],[[14,[8,13]]]],[[[57,[-1,-2]],3,[15,[25]],62],[[14,[13]]],70,[82,38,45,46]],[[-1,3,[15,[25]],62,85],[[14,[13]]],[]],[[-1,3,[15,[25]],62,85],[[14,[13]]],[]],[[-1,3,[15,[25]],32],[[14,[13]]],[]],[[40,3,[15,[25]],32],[[14,[13]]]],[[41,3,[15,[25]],32],[[14,[13]]]],[[42,3,[15,[25]],32],[[14,[13]]]],[[[43,[-1]],3,[15,[25]],32],[[14,[13]]],[44,38,45,46]],[[47,3,[15,[25]],32],[[14,[13]]]],[[[48,[-1]],3,[15,[25]],32],[[14,[13]]],[[50,[49]],38,45,46]],[[[51,[-1]],3,[15,[25]],32],[[14,[13]]],[[50,[52]],38,45,46]],[[53,3,[15,[25]],32],[[14,[13]]]],[[54,3,[15,[25]],32],[[14,[13]]]],[[55,3,[15,[25]],32],[[14,[13]]]],[[56,3,[15,[25]],32],[[14,[13]]]],[[[57,[-1,-2]],3,[15,[25]],32],[[14,[13]]],70,[82,38,45,46]],[[[58,[-1,-2]],3,[15,[25]],32],[[14,[13]]],70,[82,38,45,46]],[[27,3,[15,[25]],32],[[14,[13]]]],[[-1,3,[15,[25]],32,85],[[14,[13]]],[]],[[-1,3,[15,[25]],32,85],[[14,[13]]],[]],[[27,3,[15,[25]],32,85],[[14,[13]]]],[[25,25],[[15,[6]]]],[[31,31],[[15,[6]]]],[[[17,[-1]],[17,[-1]]],[[15,[6]]],86],[[9,9],[[15,[6]]]],[[23,23],[[15,[6]]]],[[],35],[35,[[15,[[87,[19]]]]]],[-1,[[15,[[87,[19]]]]],[]],[-1,[[15,[[87,[19]]]]],[]],[[[43,[-1]]],[[15,[[87,[19]]]]],[44,38,45,46]],[47,[[15,[[87,[19]]]]]],[53,[[15,[[87,[19]]]]]],[54,[[15,[[87,[19]]]]]],[55,[[15,[[87,[19]]]]]],[[[57,[-1,-2]]],[[15,[[87,[19]]]]],70,[82,38,45,46]],[[[58,[-1,-2]]],[[15,[[87,[19]]]]],70,[82,38,45,46]],[3,[[88,[5]]]],[3,[[88,[5]]]],[[3,7],3],[[[48,[-1]],-2],[[48,[-1]]],[[50,[49]],38,45,46],[[78,[49]]]],[[[51,[-1]],-2],[[51,[-1]]],[[50,[52]]],[[78,[52]]]],[[25,7],25],[3,23],[3,23],[3,8],[3,23],[3,8],[[25,7],25],[[25,7],25],[[30,7],30],[[25,-1,-2],25,[[28,[1]]],[[28,[31]]]],[[25,-1],25,18],[[25,-1],25,18],[[25,-1],25,[[24,[1]]]],[[25,-1],25,18],[[25,-1],25,18],[[25,-1],25,[[24,[1]]]],[[30,-1],30,[[24,[1]]]],[[30,-1],30,18],[[25,-1,-2],25,[[28,[36]]],[[28,[1]]]],[[25,-1],25,18],[[3,-1],5,[[28,[8]]]],[[25,-1],25,[[24,[79]]]],[[25,-1],25,[[24,[79]]]],[[25,-1],25,18],[[3,-1],3,[[24,[79]]]],[[3,-1],3,[[24,[79]]]],[[3,-1],3,18],[37,[[61,[60]]]],[[],35],[[3,80],3],0,[[3,-1],3,[[28,[3]]]],[[3,-1],3,[[24,[9]]]],[[3,7],3],[[3,7],3],[[3,7],3],[[3,-1],3,[[24,[9]]]],[[3,-1],3,18],[-1,27,[[28,[23]]]],[-1,27,[[28,[9]]]],[26,7],[37,7],[[3,60],3],[31,62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[25,7],25],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[3,[[89,[12]]]],[[3,-1],[[89,[12]]],18],[[3,-1],[[89,[12]]],18],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[-1,-2],[[58,[-1,-2]]],[],[82,38,45,46]],[[-1,-2],[[58,[-1,-2]]],[],[82,38,45,46]],[-1,21,[]],0,[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[25,-1],25,[[24,[79]]]],[[25,-1],25,[[24,[39]]]],[[25,-1],25,[[24,[9]]]],[[25,-1],25,18],[[]],[[25,-1],25,[[24,[35]]]],[[25,-1],25,[[24,[9]]]],[[3,-1],3,[[24,[9]]]],[[25,-1],25,[[24,[9]]]],[[3,-1],3,[[24,[9]]]],[[25,-1],25,18],[[3,-1],3,18],[[3,-1],3,[[24,[9]]]],[[3,-1],3,18],[[25,-1],25,[[24,[79]]]],[[25,-1],25,18],[[3,-1],3,[[24,[79]]]],[[3,-1],3,18],[[23,79],[[14,[5,66]]]],[[23,2],[[14,[5,66]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[90,34],[[91,[15,[92]]],91],[[93,93],93],[[91,93],91],[[93,93],5],[[91,93],5],[91,91],[91,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[94,7],94],[93,93],[92,92],[94,94],[95,95],[90,90],[93,93],[96,96],[97,97],[91,91],[80,80],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[92,92],6],[[94,94],6],[[95,95],6],[[90,90],6],[[93,93],6],[[97,97],6],[[91,91],6],[[93,93],7],[[],93],[[],97],[[],91],[[],80],[[],80],[91,91],[[91,93],91],[[92,92],7],[[94,94],7],[[95,95],7],[[90,90],7],[[93,93],7],[[96,96],7],[[97,97],7],[[91,91],7],[[91,93],7],[[80,91],80],[[91,[15,[92]]],91],[[92,10],[[14,[5,66]]]],[[94,10],[[14,[5,66]]]],[[95,10],[[14,[5,66]]]],[[90,10],[[14,[5,66]]]],[[93,10],[[14,[5,66]]]],[[96,10],[[14,[5,66]]]],[[97,10],[[14,[5,66]]]],[[97,10],[[14,[5,66]]]],[[91,10],[[14,[5,66]]]],[[91,10],[[14,[5,66]]]],[[80,10],11],[[[5,[34,34,34]]],92],[34,92],[94,92],[90,92],[95,92],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,95],[94,95],[-1,-1,[]],[[[5,[34,34,34]]],90],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[93,91],[-1,-1,[]],[94,95],[90,34],[91,[[15,[92]]]],[91,93],[80,91],[91,[[15,[92]]]],[80,91],[80,91],[80,91],[80,91],[91,[[15,[92]]]],[80,91],[80,91],[[92,-1],5,16],[[94,-1],5,16],[[95,-1],5,16],[[90,-1],5,16],[[93,-1],5,16],[[97,-1],5,16],[[91,-1],5,16],[[80,91],80],[91,91],[95,34],[[93,93],93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[95,[[15,[94]]]],[-1,-2,[],[]],[[80,91],80],[91,91],[94,7],[93,7],[91,7],[91,91],[93,96],[[80,91],80],[[],93],[[],91],[96,15],[[92,-1],91,[[28,[92]]]],[[94,-1],91,[[28,[92]]]],[[95,-1],91,[[28,[92]]]],[[90,-1],91,[[28,[92]]]],[92,91],[94,91],[95,91],[90,91],[[92,92],[[15,[6]]]],[[94,94],[[15,[6]]]],[[95,95],[[15,[6]]]],[[90,90],[[15,[6]]]],[[93,93],[[15,[6]]]],[[97,97],[[15,[6]]]],[[91,91],[[15,[6]]]],[[80,91],80],[[],80],[90,34],[[93,93],93],[93,[[0,[29,98,38]]]],[97,[[0,[29,98,38]]]],[91,[[0,[29,98,38]]]],[92,[[0,[29,98,38]]]],[94,[[0,[29,98,38]]]],[95,[[0,[29,98,38]]]],[90,[[0,[29,98,38]]]],[92,[[0,[29,98,38]]]],[94,[[0,[29,98,38]]]],[95,[[0,[29,98,38]]]],[90,[[0,[29,98,38]]]],[91,[[0,[29,98,38]]]],[[93,93,7],93],[91,91],[[],80],[[93,93],93],[[91,93],91],[[93,93],5],[[91,93],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[-1,8,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[91,91],[[91,[15,[92]]],91],[[80,91],80],[[80,91],80],[[91,99],[[14,[5,100]]]],[[91,99],[[14,[5,100]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[101,[-1]]],[[101,[-2]]],102,102],[103,[[15,[2]]]],[64,[[15,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[103,103],[104,104],[64,64],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[101,[-1]]],[[0,[19]]],102],[[103,103],7],[[104,104],7],[[64,64],7],[[[101,[-1]]],77,102],[[[101,[-1]]],105,102],[[[101,[-1]],10],[[89,[5,66]]],102],[[[101,[-1]],10],11,102],[[103,10],11],[[103,10],11],[[104,10],11],[[104,10],11],[[64,10],11],[[64,10],11],[[[101,[-1]],3],[[101,[-1]]],102],[[[101,[-1]]],23,[]],[[[101,[106]]],23],[[[101,[107]]],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[66,[[101,[-1]]],102],[100,[[101,[-1]]],102],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[101,[-1]],103],[[15,[104]]],102],[[103,-1],5,16],[[64,-1],5,16],[[[101,[-1]],103,104],[[15,[104]]],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[101,[-1]]],64,102],[64,[[101,[-1]]],102],[[[101,[-1]]],[[88,[5]]],102],[[64,-1],[[101,[-2]]],29,102],[[[101,[-1]]],23,102],[[[101,[-1]]],[[15,[108]]],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[101,[-1]]],7,102],[[[101,[-1]],3],[[101,[-1]]],102],0,0,0,0,0,0,0,0,0,0,0,0,0,[12,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[12,12],[110,110],[[[111,[-1]]],[[111,[-1]]],38],[[[112,[-1]]],[[112,[-1]]],38],[113,113],[114,114],[85,85],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[85,85],6],[[12,2],7],[[],12],[[],[[111,[-1]]],[]],[[],[[112,[-1]]],[]],[[],113],[[],114],[[12,12],7],[[85,85],7],[[109,10],11],[[109,10],11],[[12,10],11],[[110,10],11],[[[111,[-1]],10],11,67],[[[112,[-1]],10],11,67],[[113,10],11],[[114,10],11],[[85,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[12,2],34],[[12,2],7],[[12,2],[[15,[[112,[-1]]]]],[115,38,45,46]],[[12,2],[[15,[[0,[-1]]]]],[115,38,45,46]],[[12,2],[[15,[-1]]],[115,38,45,46]],[[12,2],[[15,[113]]]],[[12,2],[[15,[0]]]],[12,110],[[12,2],[[15,[60]]]],[[12,2],[[15,[114]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[110,[[15,[1]]]],[[[111,[-1]]],15,[]],[[[112,[-1]]],15,[]],[113,[[15,[32]]]],[114,[[15,[60]]]],[110,[[15,[1]]]],[[[111,[-1]]],15,[]],[[[112,[-1]]],15,[]],[113,[[15,[32]]]],[114,[[15,[60]]]],[[85,85],[[15,[6]]]],[[12,2],[[15,[[111,[-1]]]]],[115,38,45,46]],[[12,2],[[15,[[0,[-1]]]]],[115,38,45,46]],[[12,2],[[15,[-1]]],[115,38,45,46]],[12,[[15,[[5,[8,12]]]]]],[110,[[5,[60,[15,[60]]]]]],[[[111,[-1]]],[[5,[60,[15,[60]]]]],[]],[[[112,[-1]]],[[5,[60,[15,[60]]]]],[]],[113,[[5,[60,[15,[60]]]]]],[114,[[5,[60,[15,[60]]]]]],[12,[[15,[[5,[2,12]]]]]],[[12,2],[[15,[12]]]],[12,[[15,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[[12,2],[[14,[7,109]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[12,2],[[14,[[15,[[112,[-1]]]],109]]],[115,38,45,46]],[[12,2],[[14,[[15,[[0,[-1]]]],109]]],[115,38,45,46]],[[12,2],[[14,[[15,[-1]],109]]],[115,38,45,46]],[[12,2],[[14,[[15,[113]],109]]]],[[12,2],[[14,[[15,[0]],109]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[12,2],[[14,[[15,[[111,[-1]]]],109]]],[115,38,45,46]],[[12,2],[[14,[[15,[[0,[-1]]]],109]]],[115,38,45,46]],[[12,2],[[14,[[15,[-1]],109]]],[115,38,45,46]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[12,2],[[15,[85]]]],0,0],"c":[],"p":[[3,"Id",0],[15,"str"],[3,"Command",107],[4,"ColorChoice",0],[15,"tuple"],[4,"Ordering",1538],[15,"bool"],[3,"String",1539],[3,"Str",107],[3,"Formatter",1540],[6,"Result",1540],[3,"ArgMatches",1375],[6,"Error",0],[4,"Result",1541],[4,"Option",1542],[8,"Hasher",1543],[4,"Resettable",107],[8,"IntoIterator",1544],[8,"Iterator",1545],[3,"PossibleValue",107],[3,"TypeId",1546],[15,"slice"],[3,"StyledStr",107],[8,"IntoResettable",107],[3,"Arg",107],[4,"ArgAction",107],[3,"UnknownArgumentValueParser",107],[8,"Into",1547],[8,"Display",1540],[3,"ArgGroup",107],[3,"OsStr",107],[3,"OsStr",1548],[3,"Path",1549],[15,"u8"],[3,"ValueParser",107],[4,"ArgPredicate",107],[3,"ValueRange",107],[8,"Clone",1550],[4,"ValueHint",107],[3,"StringValueParser",107],[3,"OsStringValueParser",107],[3,"PathBufValueParser",107],[3,"EnumValueParser",107],[8,"ValueEnum",0],[8,"Send",1551],[8,"Sync",1551],[3,"PossibleValuesParser",107],[3,"RangedI64ValueParser",107],[15,"i64"],[8,"TryFrom",1547],[3,"RangedU64ValueParser",107],[15,"u64"],[3,"BoolValueParser",107],[3,"FalseyValueParser",107],[3,"BoolishValueParser",107],[3,"NonEmptyStringValueParser",107],[3,"MapValueParser",107],[3,"TryMapValueParser",107],[8,"Ord",1538],[15,"usize"],[4,"Bound",1552],[3,"OsString",1548],[8,"PartialEq",1538],[4,"ErrorKind",1233],[8,"AsRef",1547],[3,"Error",1540],[8,"Debug",1540],[3,"RangeInclusive",1552],[3,"RangeFull",1552],[8,"TypedValueParser",107],[15,"array"],[3,"Vec",1553],[3,"RangeToInclusive",1552],[3,"Range",1552],[3,"RangeFrom",1552],[3,"RangeTo",1552],[15,"never"],[8,"RangeBounds",1552],[15,"char"],[3,"Styles",964],[8,"Hash",1543],[8,"Fn",1554],[8,"FnOnce",1554],[8,"FnMut",1554],[4,"ValueSource",1375],[8,"PartialOrd",1538],[3,"Box",1555],[6,"Result",1556],[6,"Result",1233],[3,"RgbColor",964],[3,"Style",964],[4,"Color",964],[3,"Effects",964],[4,"AnsiColor",964],[3,"Ansi256Color",964],[3,"EffectIter",964],[3,"Reset",964],[8,"Copy",1551],[8,"Write",1557],[3,"Error",1556],[3,"Error",1233],[8,"ErrorFormatter",1233],[4,"ContextKind",1233],[4,"ContextValue",1233],[15,"i32"],[3,"KindFormatter",1233],[3,"RichFormatter",1233],[8,"Error",1558],[4,"MatchesError",1375],[3,"IdsRef",1375],[3,"Values",1375],[3,"ValuesRef",1375],[3,"RawValues",1375],[3,"Indices",1375],[8,"Any",1546],[8,"Args",0],[8,"Subcommand",0],[8,"CommandFactory",0],[8,"FromArgMatches",0],[8,"Parser",0],[8,"ValueParserFactory",107],[13,"Downcast",1536]],"b":[[41,"impl-PartialEq%3C%26str%3E-for-Id"],[42,"impl-PartialEq%3CString%3E-for-Id"],[43,"impl-PartialEq%3Cstr%3E-for-Id"],[44,"impl-PartialEq%3CStr%3E-for-Id"],[45,"impl-PartialEq-for-Id"],[48,"impl-Debug-for-Id"],[49,"impl-Display-for-Id"],[50,"impl-Display-for-ColorChoice"],[51,"impl-Debug-for-ColorChoice"],[53,"impl-From%3C%26Str%3E-for-Id"],[54,"impl-From%3C%26%26str%3E-for-Id"],[55,"impl-From%3C%26str%3E-for-Id"],[56,"impl-From%3CStr%3E-for-Id"],[57,"impl-From%3C%26Id%3E-for-Id"],[194,"impl-AsRef%3COsStr%3E-for-OsStr"],[195,"impl-AsRef%3CPath%3E-for-OsStr"],[196,"impl-AsRef%3Cstr%3E-for-Str"],[197,"impl-AsRef%3COsStr%3E-for-Str"],[198,"impl-AsRef%3C%5Bu8%5D%3E-for-Str"],[199,"impl-AsRef%3CPath%3E-for-Str"],[335,"impl-Default-for-%26StyledStr"],[336,"impl-Default-for-StyledStr"],[371,"impl-PartialEq%3C%26OsStr%3E-for-OsStr"],[372,"impl-PartialEq-for-OsStr"],[373,"impl-PartialEq%3COsString%3E-for-OsStr"],[374,"impl-PartialEq%3Cstr%3E-for-OsStr"],[375,"impl-PartialEq%3CString%3E-for-OsStr"],[376,"impl-PartialEq%3C%26str%3E-for-OsStr"],[380,"impl-PartialEq%3COsStr%3E-for-Str"],[381,"impl-PartialEq-for-Str"],[382,"impl-PartialEq%3C%26str%3E-for-Str"],[383,"impl-PartialEq%3CId%3E-for-Str"],[384,"impl-PartialEq%3C%26OsStr%3E-for-Str"],[385,"impl-PartialEq%3CString%3E-for-Str"],[386,"impl-PartialEq%3Cstr%3E-for-Str"],[397,"impl-Debug-for-Arg"],[398,"impl-Display-for-Arg"],[401,"impl-Debug-for-Command"],[402,"impl-Display-for-Command"],[405,"impl-Display-for-ValueRange"],[406,"impl-Debug-for-ValueRange"],[408,"impl-Display-for-Str"],[409,"impl-Debug-for-Str"],[410,"impl-Debug-for-StyledStr"],[411,"impl-Display-for-StyledStr"],[427,"impl-From%3CRangeInclusive%3Ci64%3E%3E-for-ValueParser"],[428,"impl-From%3CRangeFull%3E-for-ValueParser"],[430,"impl-From%3CP%3E-for-ValueParser"],[431,"impl-From%3C%5BP;+C%5D%3E-for-ValueParser"],[432,"impl-From%3CVec%3CP%3E%3E-for-ValueParser"],[433,"impl-From%3CRangeToInclusive%3Ci64%3E%3E-for-ValueParser"],[434,"impl-From%3CRange%3Ci64%3E%3E-for-ValueParser"],[435,"impl-From%3CRangeFrom%3Ci64%3E%3E-for-ValueParser"],[436,"impl-From%3CRangeTo%3Ci64%3E%3E-for-ValueParser"],[446,"impl-From%3CStr%3E-for-OsStr"],[448,"impl-From%3C%26%26str%3E-for-OsStr"],[449,"impl-From%3C%26str%3E-for-OsStr"],[450,"impl-From%3C%26%26OsStr%3E-for-OsStr"],[451,"impl-From%3C%26Str%3E-for-OsStr"],[452,"impl-From%3C%26OsStr%3E-for-OsStr"],[453,"impl-From%3C%26OsStr%3E-for-OsStr"],[456,"impl-From%3CRange%3Cusize%3E%3E-for-ValueRange"],[457,"impl-From%3CRangeInclusive%3Cusize%3E%3E-for-ValueRange"],[458,"impl-From%3Cusize%3E-for-ValueRange"],[459,"impl-From%3CRangeTo%3Cusize%3E%3E-for-ValueRange"],[460,"impl-From%3CRangeFrom%3Cusize%3E%3E-for-ValueRange"],[461,"impl-From%3CRangeFull%3E-for-ValueRange"],[463,"impl-From%3CRangeToInclusive%3Cusize%3E%3E-for-ValueRange"],[464,"impl-From%3COption%3CT%3E%3E-for-Resettable%3CT%3E"],[467,"impl-From%3CT%3E-for-Resettable%3CT%3E"],[468,"impl-From%3C%26str%3E-for-Str"],[469,"impl-From%3C%26Str%3E-for-Str"],[470,"impl-From%3C%26%26str%3E-for-Str"],[471,"impl-From%3CId%3E-for-Str"],[473,"impl-From%3C%26%26str%3E-for-StyledStr"],[474,"impl-From%3C%26str%3E-for-StyledStr"],[476,"impl-From%3CString%3E-for-StyledStr"],[477,"impl-From%3C%26String%3E-for-StyledStr"],[1061,"impl-Default-for-Styles"],[1062,"impl-Default-for-%26Styles"],[1072,"impl-PartialEq-for-Style"],[1073,"impl-PartialEq%3CEffects%3E-for-Style"],[1082,"impl-Display-for-Reset"],[1083,"impl-Debug-for-Reset"],[1084,"impl-Display-for-Style"],[1085,"impl-Debug-for-Style"],[1087,"impl-From%3C(u8,+u8,+u8)%3E-for-Color"],[1088,"impl-From%3Cu8%3E-for-Color"],[1089,"impl-From%3CAnsiColor%3E-for-Color"],[1090,"impl-From%3CRgbColor%3E-for-Color"],[1091,"impl-From%3CAnsi256Color%3E-for-Color"],[1095,"impl-From%3Cu8%3E-for-Ansi256Color"],[1096,"impl-From%3CAnsiColor%3E-for-Ansi256Color"],[1312,"impl-Debug-for-Error%3CF%3E"],[1313,"impl-Display-for-Error%3CF%3E"],[1314,"impl-Display-for-ContextKind"],[1315,"impl-Debug-for-ContextKind"],[1316,"impl-Display-for-ContextValue"],[1317,"impl-Debug-for-ContextValue"],[1318,"impl-Display-for-ErrorKind"],[1319,"impl-Debug-for-ErrorKind"],[1327,"impl-From%3CError%3E-for-Error%3CF%3E"],[1328,"impl-From%3CError%3E-for-Error%3CF%3E"],[1430,"impl-Display-for-MatchesError"],[1431,"impl-Debug-for-MatchesError"]]},\
"clap_derive":{"doc":"clap_derive","t":"YYYY","n":["Args","Parser","Subcommand","ValueEnum"],"q":[[0,"clap_derive"]],"d":["Generates the <code>Args</code> impl.","Generates the <code>Parser</code> implementation.","Generates the <code>Subcommand</code> impl.","Generates the <code>ValueEnum</code> impl."],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[],"b":[]},\
"clap_lex":{"doc":"Minimal, flexible command-line parser","t":"DNNIDDEDNLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLKLLLLL","n":["ArgCursor","Current","End","OsStrExt","ParsedArg","RawArgs","SeekFrom","ShortFlags","Start","advance_by","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","cursor","default","display","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_args","hash","insert","into","into","into","into","into","into_iter","is_empty","is_empty","is_end","is_escape","is_long","is_negative_number","is_negative_number","is_short","is_stdio","new","next","next","next_flag","next_os","next_value_os","partial_cmp","partial_cmp","peek","peek_os","remaining","seek","split","split_once","starts_with","strip_prefix","to_long","to_owned","to_owned","to_owned","to_owned","to_owned","to_short","to_value","to_value_os","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_str","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"clap_lex"],[111,"core::result"],[112,"core::cmp"],[113,"core::fmt"],[114,"core::option"],[115,"core::fmt"],[116,"core::hash"],[117,"core::iter::traits::collect"],[118,"std::ffi::os_str"],[119,"core::str::error"],[120,"core::any"]],"d":["Position within <code>RawArgs</code>","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","","Command-line Argument","Command-line arguments","Enumeration of possible methods to seek within an I/O …","Walk through short flags within a <code>ParsedArg</code>","Sets the offset to the provided number of bytes.","Move the iterator forward by <code>n</code> short flags","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the given pattern matches a sub-slice of …","Create a cursor for walking the arguments","","Safely print an argument that may contain non-UTF8 content","","","","","Returns the byte index of the first character of this …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","<strong>NOTE:</strong> The argument returned will be the current binary.","","Inject arguments before the <code>RawArgs::next</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Argument is length of 0","No short flags left","Any remaining args?","Does the argument look like an argument escape (<code>--</code>)","Can treat as a long-flag","Does the argument look like a negative number?","Does the short flag look like a number","Can treat as a short-flag","Does the argument look like a stdio argument (<code>-</code>)","Example","Advance the cursor, returning the next <code>ParsedArg</code>","","Advance the iterator, returning the next short flag on …","Advance the cursor, returning a raw argument value.","Advance the iterator, returning everything left as a value","","","Return the next <code>ParsedArg</code>","Return a raw argument value.","Return all remaining raw arguments, advancing the cursor …","Adjust the cursor’s position","An iterator over substrings of this string slice, …","Splits the string on the first occurrence of the specified …","Returns <code>true</code> if the given pattern matches a prefix of this …","Returns a string slice with the prefix removed.","Treat as a long-flag","","","","","","Treat as a short-flag","Treat as a value","Treat as a value","","","","","","","","","","","Converts to a string slice.","","","","",""],"i":[0,8,8,0,0,0,0,0,8,1,5,6,7,1,8,5,6,7,1,8,5,6,7,1,8,5,6,7,1,8,6,7,24,5,5,7,5,6,7,8,24,5,6,7,1,8,5,5,6,7,1,8,5,7,5,5,6,7,1,8,1,7,1,5,7,7,7,1,7,7,5,5,1,1,5,1,6,7,5,5,5,5,24,24,24,24,7,5,6,7,1,8,7,7,7,5,6,7,1,8,5,6,7,1,8,24,5,6,7,1,8],"f":[0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3,2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[6,6],[7,7],[1,1],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[6,6],9],[[7,7],9],[[-1,10],11,[]],[5,6],[[],5],[7,[[0,[12]]]],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[-1,10],[[13,[2]]],[]],[[5,14],15],[[6,14],15],[[7,14],15],[[1,14],15],[[8,14],[[4,[3,16]]]],[-1,5,17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[7,-1],3,18],[[5,6,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,11],[1,11],[[5,6],11],[7,11],[7,11],[7,11],[1,11],[7,11],[7,11],[-1,5,19],[[5,6],[[13,[7]]]],[1,13],[1,[[13,[[4,[20,21]]]]]],[[5,6],[[13,[21]]]],[1,[[13,[21]]]],[[6,6],[[13,[9]]]],[[7,7],[[13,[9]]]],[[5,6],[[13,[7]]]],[[5,6],[[13,[21]]]],[[5,6],[[0,[17]]]],[[5,6,8],3],0,[[-1,10],[[13,[[3,[21,21]]]]],[]],[[-1,10],11,[]],[[-1,10],[[13,[21]]],[]],[7,[[13,[[3,[[4,[10,21]],[13,[21]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,[[13,[1]]]],[7,[[4,[10,21]]]],[7,21],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[10,22]]],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]]],"c":[],"p":[[3,"ShortFlags",0],[15,"usize"],[15,"tuple"],[4,"Result",111],[3,"RawArgs",0],[3,"ArgCursor",0],[3,"ParsedArg",0],[4,"SeekFrom",0],[4,"Ordering",112],[15,"str"],[15,"bool"],[8,"Display",113],[4,"Option",114],[3,"Formatter",113],[6,"Result",113],[3,"Error",113],[8,"Iterator",115],[8,"Hasher",116],[8,"IntoIterator",117],[15,"char"],[3,"OsStr",118],[3,"Utf8Error",119],[3,"TypeId",120],[8,"OsStrExt",0]],"b":[]},\
"colorchoice":{"doc":"Global override of color control","t":"NNNENLLLLLLLLLLLLL","n":["Always","AlwaysAnsi","Auto","ColorChoice","Never","borrow","borrow_mut","clone","default","eq","fmt","from","global","into","try_from","try_into","type_id","write_global"],"q":[[0,"colorchoice"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::any"]],"d":["","","","Selection for overriding color output","","","","","","","","Returns the argument unchanged.","Get the current <code>ColorChoice</code> state","Calls <code>U::from(self)</code>.","","","","Override the detected <code>ColorChoice</code>"],"i":[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,1],2],[[1,3],4],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[1,7]],"c":[],"p":[[4,"ColorChoice",0],[15,"bool"],[3,"Formatter",18],[6,"Result",18],[4,"Result",19],[3,"TypeId",20],[15,"tuple"]],"b":[]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","t":"DDDDDDDDDDDKIIIIIIIIIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLL","n":["AsKebabCase","AsLowerCamelCase","AsPascalCase","AsShoutyKebabCase","AsShoutySnakeCase","AsShoutySnekCase","AsSnakeCase","AsSnekCase","AsTitleCase","AsTrainCase","AsUpperCamelCase","TO_SHOUTY_SNEK_CASE","ToKebabCase","ToLowerCamelCase","ToPascalCase","ToShoutyKebabCase","ToShoutySnakeCase","ToShoutySnekCase","ToSnakeCase","ToSnekCase","ToTitleCase","ToTrainCase","ToUpperCamelCase","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","to_kebab_case","to_lower_camel_case","to_pascal_case","to_shouty_kebab_case","to_shouty_snake_case","to_snake_case","to_snek_case","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_title_case","to_train_case","to_upper_camel_case","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"heck"],[105,"core::fmt"],[106,"core::fmt"],[107,"alloc::string"],[108,"core::result"],[109,"core::any"]],"d":["This wrapper performs a kebab case conversion in …","This wrapper performs a lower camel case conversion in …","This wrapper performs a upper camel case conversion in …","This wrapper performs a kebab case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a title case conversion in …","This wrapper performs a train case conversion in …","This wrapper performs a upper camel case conversion in …","CONVERT THIS TYPE TO SNEK CASE.","This trait defines a kebab case conversion.","This trait defines a lower camel case conversion.","ToPascalCase is an alias for ToUpperCamelCase. See …","This trait defines a shouty kebab case conversion.","This trait defines a shouty snake case conversion.","Oh heck, ToShoutySnekCase is an alias for …","This trait defines a snake case conversion.","Oh heck, SnekCase is an alias for ToSnakeCase. See …","This trait defines a title case conversion.","This trait defines a train case conversion.","This trait defines an upper camel case conversion.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this type to kebab case.","Convert this type to lower camel case.","Convert this type to upper camel case.","Convert this type to shouty kebab case.","Convert this type to shouty snake case.","Convert this type to snake case.","Convert this type to snek case.","","","","","","","","","Convert this type to title case.","Convert this type to Train-Case.","Convert this type to upper camel case.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,17,18,19,20,21,22,23,1,6,7,8,9,10,11,12,24,25,26,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]],2],3,[[5,[4]]]],[[[6,[-1]],2],3,[[5,[4]]]],[[[7,[-1]],2],3,[[5,[4]]]],[[[8,[-1]],2],3,[[5,[4]]]],[[[9,[-1]],2],3,[[5,[4]]]],[[[10,[-1]],2],3,[[5,[4]]]],[[[11,[-1]],2],3,[[5,[4]]]],[[[12,[-1]],2],3,[[5,[4]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[3,"AsKebabCase",0],[3,"Formatter",105],[6,"Result",105],[15,"str"],[8,"AsRef",106],[3,"AsLowerCamelCase",0],[3,"AsShoutyKebabCase",0],[3,"AsShoutySnakeCase",0],[3,"AsSnakeCase",0],[3,"AsTitleCase",0],[3,"AsTrainCase",0],[3,"AsUpperCamelCase",0],[3,"String",107],[4,"Result",108],[3,"TypeId",109],[8,"ToShoutySnekCase",0],[8,"ToKebabCase",0],[8,"ToLowerCamelCase",0],[8,"ToPascalCase",0],[8,"ToShoutyKebabCase",0],[8,"ToShoutySnakeCase",0],[8,"ToSnakeCase",0],[8,"ToSnekCase",0],[8,"ToTitleCase",0],[8,"ToTrainCase",0],[8,"ToUpperCamelCase",0]],"b":[]},\
"osr_extract":{"doc":"","t":"DDLLMLLLLLLMMMMMMLLLLMLMMLLFMMMMMMMMMMLLLLLLLLM","n":["Cli","Replay","augment_args","augment_args_for_update","beatmap_hash","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","count100","count300","count50","count_geki","count_katu","count_miss","from","from","from_arg_matches","from_arg_matches_mut","game_mode","group_id","hp","input","into","into","main","max_combo","mods","output","perfect_combo","player_name","replay_data","replay_hash","replay_lenth","score","timestamp","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","version"],"q":[[0,"osr_extract"],[47,"clap_builder::builder::command"],[48,"clap_builder::parser::matches::arg_matches"],[49,"clap_builder"],[50,"core::result"],[51,"clap_builder::util::id"],[52,"core::option"],[53,"core::any"]],"d":["","","","","osu! beatmap MD5 hash","","","","","","","Number of 100s in standard, 150s in Taiko, 100s in CTB, …","Number of 300s","Number of 50s in standard, small fruit in CTB, 50s in mania","Number of Gekis in standard, Max 300s in mania","Number of Katus in standard, 200s in mania","Number of misses","Returns the argument unchanged.","Returns the argument unchanged.","","","Game mode of the replay (0 = osu! Standard, 1 = Taiko, 2 = …","","Life bar graph: comma separated pairs u/v, where u is the …","input replay files","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Greatest combo displayed on the score report","Mods used. See below for list of mod values.","output file","Perfect/full combo (1 = no misses and no slider breaks and …","Player name","Compressed replay data","osu! replay MD5 hash (includes certain properties of the …","Length in bytes of compressed replay data","Total score displayed on the score report","Time stamp (Windows ticks)","","","","","","","","","Version of the game when the replay was created (ex. …"],"i":[0,0,3,3,10,10,3,10,3,3,3,10,10,10,10,10,10,10,3,3,3,10,3,10,3,10,3,0,10,10,3,10,10,10,10,10,10,10,10,3,10,3,10,3,3,3,10],"f":[0,0,[1,1],[1,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[2,[[5,[3,4]]]],[2,[[5,[3,4]]]],0,[[],[[7,[6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],8],0,0,0,0,0,0,0,0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[[3,2],[[5,[8,4]]]],[[3,2],[[5,[8,4]]]],0],"c":[],"p":[[3,"Command",47],[3,"ArgMatches",48],[3,"Cli",0],[6,"Error",49],[4,"Result",50],[3,"Id",51],[4,"Option",52],[15,"tuple"],[3,"TypeId",53],[3,"Replay",0]],"b":[]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,12],16],[[12,-1],16,[17,[19,[18]]]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[8,7],[-1,-1,[]],[26,7],[27,6],[-1,-1,[]],[9,8],[5,8],[12,8],[-1,-1,[]],[1,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",259],[3,"DelimSpan",228],[15,"bool"],[8,"Sized",260],[15,"str"],[8,"AsRef",261],[8,"IntoIterator",262],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",263],[6,"Result",263],[3,"TokenStream",264],[3,"Span",264],[4,"Result",265],[8,"Hasher",266],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",243],[15,"isize"],[4,"Option",267],[3,"String",268],[15,"usize"],[8,"RangeBounds",269],[3,"TypeId",270],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]],"b":[[68,"impl-PartialEq-for-Ident"],[69,"impl-PartialEq%3CT%3E-for-Ident"],[70,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[71,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[77,"impl-Debug-for-LexError"],[78,"impl-Display-for-LexError"],[79,"impl-Display-for-TokenStream"],[80,"impl-Debug-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Debug-for-Group"],[85,"impl-Display-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Display-for-Literal"],[93,"impl-Debug-for-Literal"],[95,"impl-From%3CTokenTree%3E-for-TokenStream"],[97,"impl-From%3CTokenStream%3E-for-TokenStream"],[100,"impl-From%3CGroup%3E-for-TokenTree"],[101,"impl-From%3CLiteral%3E-for-TokenTree"],[102,"impl-From%3CIdent%3E-for-TokenTree"],[104,"impl-From%3CPunct%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]],"b":[]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":"NNGNELLFLLLLFFFFFFLFFFFFFFLLLL","n":["DifferentLengthArgs","Err","HammingResult","Ok","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","sorensen_dice","to_string","try_from","try_into","type_id"],"q":[[0,"strsim"],[30,"core::fmt"],[31,"core::fmt"],[32,"core::cmp"],[33,"core::hash"],[34,"core::clone"],[35,"core::iter::traits::collect"],[36,"alloc::string"],[37,"core::any"]],"d":["","Contains the error value","","Contains the success value","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,14,0,14,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,3],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[3,3],4],[[3,5],6],[[3,5],[[9,[7,8]]]],[-1,-1,[]],[[[10,[-1]],[10,[-1]]],2,[11,12,13]],[[-1,-2],14,15,15],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],2,[],[]],[[1,1],14],[-1,-2,[],[]],[[1,1],16],[[1,1],16],[[1,1],2],[[1,1],16],[[1,1],16],[[1,1],2],[[1,1],16],[-1,17,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]]],"c":[],"p":[[15,"str"],[15,"usize"],[4,"StrSimError",0],[15,"bool"],[3,"Formatter",30],[6,"Result",30],[15,"tuple"],[3,"Error",30],[4,"Result",31],[15,"slice"],[8,"Eq",32],[8,"Hash",33],[8,"Clone",34],[6,"HammingResult",0],[8,"IntoIterator",35],[15,"f64"],[3,"String",36],[3,"TypeId",37]],"b":[[9,"impl-Debug-for-StrSimError"],[10,"impl-Display-for-StrSimError"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNDNDNNEDNNDDENNNNNNNDNNDNNNNNNNNNNNNNNNNNDDNNEDDDNNDNNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNEDDEDDDNNNNNENEDDDDNNEEDNNNNNNDNNNDEDDDDENDNNNNNNENDDDDDDDDDDDDDDDDNNDNNNNDNENNDDDDDDDDNDNNDNNNNNNNNENNEEDDNNNNNNNNNNNNNNNNNNNNNNNNNNDEDDDDDDDDDDDDDDDDDNNNNNEDDDNNDNNEDNNNNNNNNNNGNENNNNDNNNNEEDNNNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNNDEDENNNMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMLMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMLMMMMLMMMLMMMMMLMMMMMMMMMMMMMMMMMLMMMMAMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLFLOLLLLLLLOOLFLLLLLLLMMMMMMMMMLLMMMMMMMMMMMMMMMAMMMMMMMLMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLMMMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Enum","Eq","Err","Error","Expr","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldMutability","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemFn","ImplItemMacro","ImplItemType","ImplRestriction","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","LocalInit","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mod","Mul","MulAssign","Mut","Name","NameValue","Named","Named","Ne","Neg","Never","None","None","None","None","Not","Ok","Or","Or","Outer","Paren","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatConst","PatIdent","PatLit","PatMacro","PatOr","PatParen","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Receiver","Receiver","Reference","Reference","Reference","Rem","RemAssign","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Signature","Slice","Slice","Static","Static","StaticMutability","Stmt","StmtMacro","Str","Struct","Struct","Struct","Struct","Sub","SubAssign","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemFn","TraitItemMacro","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","comma","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","const_token","const_token","constness","constness","content","continue_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","delimiter","discriminant","diverge","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","elems","else_branch","end","end","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","len","len","len","let_token","let_token","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","loop_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","mac","make_where_clause","match_token","member","member","member","meta","meta","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_mod_style","parse_multi","parse_multi_with_leading_vert","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_single","parse_str","parse_turbofish","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","qself","qself","qself","question_token","receiver","receiver","reference","rename","rename","require_ident","require_list","require_name_value","require_path_only","rest","rest","restriction","return_token","right","right","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","start","start","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[3635,"syn::buffer"],[3669,"syn::ext"],[3673,"syn::meta"],[3687,"syn::parse"],[3783,"syn::parse::discouraged"],[3787,"syn::punctuated"],[3949,"syn::spanned"],[3951,"syn::token"],[5636,"core::str::traits"],[5637,"core::cmp"],[5638,"core::convert"],[5639,"core::marker"],[5640,"core::fmt"],[5641,"core::fmt"],[5642,"core::fmt"],[5643,"core::convert"],[5644,"core::hash"],[5645,"proc_macro2"],[5646,"proc_macro2"],[5647,"core::ops::function"],[5648,"proc_macro2::extra"],[5649,"alloc::string"],[5650,"core::any"],[5651,"proc_macro2"],[5652,"proc_macro2"],[5653,"core::ops::function"],[5654,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const block: <code>const { ... }</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expression, with or without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An associated function within the definition of a trait.","An associated function within an impl block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","An associated function within an impl block.","A macro invocation within an impl block.","An associated type within an impl block.","Unused, but reserved for RFC 3323 restrictions.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","The expression assigned in a local <code>let</code> binding, including …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in pattern position.","A macro invocation in statement position.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized pattern: <code>(A | B)</code>.","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A const block: <code>const { ... }</code>.","A pattern that binds a new variable: …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A pattern that matches any one of a set of cases.","A parenthesized pattern: <code>(A | B)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","The <code>self</code> argument of an associated method.","The <code>self</code> argument of an associated method.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference pattern: <code>&amp;mut var</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A dynamically sized slice type: <code>[T]</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","The mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.","A statement, usually ending in a semicolon.","A macro invocation in statement position.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","An associated function within the definition of a trait.","A macro invocation within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.","Parse a pattern, possibly involving <code>|</code>, possibly including a","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a pattern that does <em>not</em> involve <code>|</code> at the top level.","Parse a string of Rust code into the chosen syntax tree …","Parse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","Statements in a block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementseturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,136,136,136,153,0,0,26,169,26,0,154,0,154,26,0,0,26,169,0,0,0,26,136,136,136,136,136,136,0,26,128,0,135,135,26,128,128,26,26,128,70,26,26,73,85,112,117,138,154,0,0,154,26,0,0,0,0,187,137,0,136,136,22,85,136,6,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,26,0,0,0,0,0,0,0,128,85,107,112,117,0,26,0,0,0,0,0,85,136,0,0,0,101,26,101,169,136,70,0,138,26,85,0,0,0,0,0,0,0,169,0,26,26,169,161,12,128,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,26,0,73,78,82,154,0,13,0,26,138,0,0,0,0,0,0,0,0,165,0,26,136,0,26,85,107,112,117,138,165,169,0,26,80,0,0,0,0,26,85,136,136,126,101,13,17,65,136,137,169,80,126,153,163,137,6,136,138,12,26,135,138,169,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,101,138,169,0,0,0,0,169,161,0,26,138,0,0,123,26,138,169,136,136,101,26,138,161,0,26,0,136,136,136,136,0,138,169,85,107,0,0,0,128,22,26,85,138,136,136,0,78,85,85,0,0,0,0,0,0,0,169,26,26,26,138,169,138,0,0,73,82,85,107,112,117,138,154,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,26,22,85,17,17,65,26,85,0,0,0,0,0,0,0,0,26,78,85,107,112,117,128,138,169,0,0,0,0,26,138,26,90,122,171,54,142,180,10,34,50,155,152,49,35,104,160,1,29,36,122,16,20,21,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,48,49,50,51,52,52,53,53,54,55,56,57,58,59,60,61,62,63,64,67,69,71,74,75,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,109,110,111,113,114,115,116,118,119,120,121,124,125,139,140,141,142,143,144,145,146,147,148,149,150,166,168,185,186,96,30,134,176,30,39,3,5,3,5,29,32,37,37,59,62,89,119,36,40,47,63,69,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,84,74,75,83,84,97,115,158,173,182,18,24,49,57,87,90,91,96,106,145,164,0,11,27,43,55,144,170,181,0,33,0,139,29,36,140,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,102,155,20,67,68,74,75,76,83,84,86,94,96,109,113,115,118,124,148,150,158,69,125,186,42,63,72,72,37,37,76,86,113,118,179,36,122,93,38,88,0,0,21,72,77,153,75,76,113,114,115,91,118,119,120,14,134,16,167,57,143,30,39,50,125,186,182,170,172,177,179,180,181,27,60,144,146,147,183,42,53,53,24,87,8,8,10,65,66,15,28,45,75,76,86,94,97,98,118,120,156,157,167,33,35,40,41,43,45,49,51,54,55,56,58,61,64,67,86,94,118,167,0,88,184,69,16,23,25,57,95,99,145,8,8,8,10,65,66,3,5,122,171,40,77,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,73,73,73,74,75,75,76,77,78,78,78,79,80,81,82,82,82,83,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,101,101,101,101,101,102,103,104,105,106,107,107,107,107,107,108,109,110,111,112,112,112,112,112,113,114,115,116,117,117,117,117,117,118,119,120,121,122,123,123,123,124,125,126,127,128,128,128,128,128,128,128,128,129,130,131,132,3,3,5,5,133,134,135,136,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,34,21,86,87,91,95,96,97,98,99,110,113,115,118,120,122,156,157,158,151,41,172,72,77,155,160,69,8,10,65,66,10,16,20,21,75,76,86,87,88,92,93,94,95,96,97,98,99,102,103,104,109,110,113,115,118,120,122,139,152,156,157,158,42,91,173,40,162,43,66,166,36,122,159,171,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,17,17,17,17,153,151,153,71,90,91,96,106,17,17,32,33,38,40,47,63,100,151,140,28,31,17,55,170,45,166,124,74,83,180,72,36,77,79,84,171,72,53,53,46,46,47,72,77,155,160,48,48,92,111,116,121,168,175,72,49,39,67,150,0,11,50,93,79,36,20,54,94,109,124,139,142,179,180,68,184,185,186,18,8,10,74,128,129,130,131,132,3,5,133,8,31,61,36,36,36,122,159,171,72,19,34,50,51,60,79,122,141,146,147,159,162,171,177,183,0,0,0,8,10,13,14,15,16,18,19,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,128,129,129,130,131,132,3,5,133,134,136,137,148,151,152,154,155,159,161,164,165,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,0,8,11,14,11,14,134,134,0,11,0,151,138,138,20,11,14,11,0,0,138,0,155,20,129,164,26,8,10,40,45,69,125,141,142,148,150,166,11,13,14,15,52,52,57,79,134,145,147,162,178,160,11,81,162,0,52,52,57,145,147,178,58,122,50,124,88,104,151,13,13,13,57,145,96,56,28,31,151,124,91,93,23,55,86,88,92,94,95,97,98,100,108,109,110,111,113,114,115,116,118,120,121,166,168,170,8,10,128,129,130,131,132,3,5,133,71,89,108,114,119,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,128,129,129,130,130,131,131,132,132,3,3,5,5,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,66,133,0,72,105,179,53,53,94,109,164,23,95,11,139,128,129,130,131,132,3,5,96,42,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,3,5,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,0,129,130,131,132,3,5,133,14,134,91,96,97,100,102,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,59,50,20,35,76,86,94,98,109,113,118,120,124,148,156,160,185,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,72,72,98,110,115,120,44,149,174,25,99,19,8,62,90,91,93,96,122,171,100,129,130,131,132,133,15,133,157,122,171,24,87,20,21,86,87,88,89,93,94,95,96,97,98,99,100,108,109,110,118,119,120,72,81,63,169,173,182,187,64,0,0,224,224,225,224,225,225,225,225,225,225,224,225,225,225,224,225,225,225,224,224,225,225,225,225,225,225,224,225,224,225,224,225,0,347,347,347,0,229,229,229,229,229,229,229,0,229,229,229,229,229,6,0,0,0,6,218,0,0,0,0,0,0,0,232,230,234,232,233,238,230,234,232,233,238,232,230,233,230,233,230,232,233,0,232,234,232,233,230,230,230,232,232,232,230,230,234,232,233,238,230,234,232,233,238,230,230,230,232,232,230,230,215,232,218,238,218,232,218,232,234,232,232,232,230,232,232,230,230,233,230,232,230,234,232,233,238,230,234,232,233,238,230,234,232,233,238,0,0,348,349,246,0,0,0,0,0,0,0,0,246,239,243,248,244,245,208,209,246,239,243,248,244,245,208,209,246,239,239,243,244,245,208,246,239,239,243,244,245,208,246,246,239,239,239,239,239,239,239,243,248,244,245,208,209,246,239,239,239,239,239,239,243,248,244,245,208,209,246,239,239,239,243,248,244,245,208,209,239,246,246,239,239,239,239,239,239,243,248,244,245,208,209,239,246,243,248,244,245,208,209,243,248,244,245,208,209,239,239,239,239,239,239,239,239,246,246,239,239,239,243,248,244,245,208,209,239,246,239,243,244,245,208,246,239,246,239,239,243,248,244,245,208,209,246,239,243,248,244,245,208,209,246,239,243,248,244,245,208,209,246,246,246,0,350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,202,298,301,302,304,305,306,307,311,315,318,319,322,323,327,329,331,332,334,339,341,343,202,298,301,302,304,305,306,307,311,315,318,319,322,323,327,329,331,332,334,339,341,343,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,250,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,344,345,346,202,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,250,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,250,202,251,252,253,254,255,256,257,258,259,260,198,261,262,263,264,265,200,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,197,199,284,285,201,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",3687],[8,"FromStr",5636],[3,"Ident",0],[3,"ImplGenerics",0],[3,"Lifetime",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"Expr",0],[3,"ExprArray",0],[3,"ExprAssign",0],[3,"ExprAsync",0],[3,"ExprAwait",0],[3,"ExprBinary",0],[3,"ExprBlock",0],[3,"ExprBreak",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprClosure",0],[3,"ExprConst",0],[3,"ExprContinue",0],[3,"ExprField",0],[3,"ExprForLoop",0],[3,"ExprGroup",0],[3,"ExprIf",0],[3,"ExprIndex",0],[3,"ExprInfer",0],[3,"ExprLet",0],[3,"ExprLit",0],[3,"ExprLoop",0],[3,"ExprMacro",0],[3,"ExprMatch",0],[3,"ExprMethodCall",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprRange",0],[3,"ExprReference",0],[3,"ExprRepeat",0],[3,"ExprReturn",0],[3,"ExprStruct",0],[3,"ExprTry",0],[3,"ExprTryBlock",0],[3,"ExprTuple",0],[3,"ExprUnary",0],[3,"ExprUnsafe",0],[3,"ExprWhile",0],[3,"ExprYield",0],[4,"Member",0],[3,"Index",0],[3,"FieldValue",0],[3,"Label",0],[3,"Arm",0],[4,"RangeLimits",0],[3,"File",0],[3,"Generics",0],[4,"GenericParam",0],[3,"LifetimeParam",0],[3,"TypeParam",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateLifetime",0],[3,"PredicateType",0],[4,"Item",0],[3,"ItemConst",0],[3,"ItemEnum",0],[3,"ItemExternCrate",0],[3,"ItemFn",0],[3,"ItemForeignMod",0],[3,"ItemImpl",0],[3,"ItemMacro",0],[3,"ItemMod",0],[3,"ItemStatic",0],[3,"ItemStruct",0],[3,"ItemTrait",0],[3,"ItemTraitAlias",0],[3,"ItemType",0],[3,"ItemUnion",0],[3,"ItemUse",0],[4,"UseTree",0],[3,"UsePath",0],[3,"UseName",0],[3,"UseRename",0],[3,"UseGlob",0],[3,"UseGroup",0],[4,"ForeignItem",0],[3,"ForeignItemFn",0],[3,"ForeignItemStatic",0],[3,"ForeignItemType",0],[3,"ForeignItemMacro",0],[4,"TraitItem",0],[3,"TraitItemConst",0],[3,"TraitItemFn",0],[3,"TraitItemType",0],[3,"TraitItemMacro",0],[4,"ImplItem",0],[3,"ImplItemConst",0],[3,"ImplItemFn",0],[3,"ImplItemType",0],[3,"ImplItemMacro",0],[3,"Signature",0],[4,"FnArg",0],[3,"Receiver",0],[3,"Variadic",0],[4,"StaticMutability",0],[4,"ImplRestriction",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[4,"BinOp",0],[4,"UnOp",0],[4,"Pat",0],[3,"PatIdent",0],[3,"PatOr",0],[3,"PatParen",0],[3,"PatReference",0],[3,"PatRest",0],[3,"PatSlice",0],[3,"PatStruct",0],[3,"PatTuple",0],[3,"PatTupleStruct",0],[3,"PatType",0],[3,"PatWild",0],[3,"FieldPat",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"AssocType",0],[3,"AssocConst",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[4,"Visibility",0],[3,"VisRestricted",0],[4,"FieldMutability",0],[3,"Block",0],[4,"Stmt",0],[3,"Local",0],[3,"LocalInit",0],[3,"StmtMacro",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"BareVariadic",0],[4,"ReturnType",0],[15,"tuple"],[4,"Ordering",5637],[15,"bool"],[8,"AsRef",5638],[8,"Sized",5639],[3,"Formatter",5640],[3,"Error",5640],[4,"Result",5641],[6,"Result",5640],[3,"SelfType",3951],[3,"Crate",3951],[3,"SelfValue",3951],[3,"Extern",3951],[3,"Super",3951],[3,"Underscore",3951],[15,"usize"],[3,"Literal",5642],[8,"Into",5638],[4,"Option",5643],[8,"Hasher",5644],[3,"Iter",3787],[3,"IterMut",3787],[3,"Span",5642],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",5645],[8,"Parse",3687],[6,"ParseStream",3687],[3,"TokenStream",5642],[8,"Parser",3687],[3,"Vec",5646],[8,"FnMut",5647],[3,"DelimSpan",5648],[3,"String",5649],[3,"TypeId",5650],[3,"TokenBuffer",3635],[3,"Cursor",3635],[4,"Delimiter",5642],[3,"Punct",5642],[4,"TokenTree",5642],[3,"ParseNestedMeta",3673],[3,"Error",3687],[8,"Display",5640],[3,"ParseBuffer",3687],[3,"StepCursor",3687],[3,"Lookahead1",3687],[8,"IntoIterator",5651],[3,"LexError",5642],[8,"ToTokens",5652],[3,"Nothing",3687],[3,"Punctuated",3787],[8,"Peek",3687],[8,"FnOnce",5647],[8,"Clone",5653],[3,"Pairs",3787],[3,"IntoPairs",3787],[3,"IntoIter",3787],[4,"Pair",3787],[8,"Default",5654],[3,"PairsMut",3787],[8,"Token",3951],[3,"Group",3951],[3,"Abstract",3951],[3,"As",3951],[3,"Async",3951],[3,"Auto",3951],[3,"Await",3951],[3,"Become",3951],[3,"Box",3951],[3,"Break",3951],[3,"Const",3951],[3,"Continue",3951],[3,"Default",3951],[3,"Do",3951],[3,"Dyn",3951],[3,"Else",3951],[3,"Enum",3951],[3,"Final",3951],[3,"Fn",3951],[3,"For",3951],[3,"If",3951],[3,"Impl",3951],[3,"In",3951],[3,"Let",3951],[3,"Loop",3951],[3,"Macro",3951],[3,"Match",3951],[3,"Mod",3951],[3,"Move",3951],[3,"Mut",3951],[3,"Override",3951],[3,"Priv",3951],[3,"Pub",3951],[3,"Ref",3951],[3,"Return",3951],[3,"Static",3951],[3,"Struct",3951],[3,"Trait",3951],[3,"Try",3951],[3,"Type",3951],[3,"Typeof",3951],[3,"Union",3951],[3,"Unsafe",3951],[3,"Unsized",3951],[3,"Use",3951],[3,"Virtual",3951],[3,"Where",3951],[3,"While",3951],[3,"Yield",3951],[3,"And",3951],[3,"AndAnd",3951],[3,"AndEq",3951],[3,"At",3951],[3,"Caret",3951],[3,"CaretEq",3951],[3,"Colon",3951],[3,"Comma",3951],[3,"Dollar",3951],[3,"Dot",3951],[3,"DotDot",3951],[3,"DotDotDot",3951],[3,"DotDotEq",3951],[3,"Eq",3951],[3,"EqEq",3951],[3,"FatArrow",3951],[3,"Ge",3951],[3,"Gt",3951],[3,"LArrow",3951],[3,"Le",3951],[3,"Lt",3951],[3,"Minus",3951],[3,"MinusEq",3951],[3,"Ne",3951],[3,"Not",3951],[3,"Or",3951],[3,"OrEq",3951],[3,"OrOr",3951],[3,"PathSep",3951],[3,"Percent",3951],[3,"PercentEq",3951],[3,"Plus",3951],[3,"PlusEq",3951],[3,"Pound",3951],[3,"Question",3951],[3,"RArrow",3951],[3,"Semi",3951],[3,"Shl",3951],[3,"ShlEq",3951],[3,"Shr",3951],[3,"ShrEq",3951],[3,"Slash",3951],[3,"SlashEq",3951],[3,"Star",3951],[3,"StarEq",3951],[3,"Tilde",3951],[3,"Brace",3951],[3,"Bracket",3951],[3,"Paren",3951],[8,"IdentExt",3669],[8,"Speculative",3783],[8,"AnyDelimiter",3783],[8,"Spanned",3949]],"b":[[1388,"impl-PartialEq%3CT%3E-for-Ident"],[1389,"impl-PartialEq-for-Ident"],[1437,"impl-IdentFragment-for-Ident"],[1438,"impl-Debug-for-Ident"],[1439,"impl-Display-for-Ident"],[1449,"impl-From%3CSelfType%3E-for-Ident"],[1450,"impl-From%3CCrate%3E-for-Ident"],[1451,"impl-From%3CSelfValue%3E-for-Ident"],[1452,"impl-From%3CExtern%3E-for-Ident"],[1453,"impl-From%3CSuper%3E-for-Ident"],[1455,"impl-From%3CUnderscore%3E-for-Ident"],[1462,"impl-From%3CMetaNameValue%3E-for-Meta"],[1463,"impl-From%3CPath%3E-for-Meta"],[1464,"impl-From%3CMetaList%3E-for-Meta"],[1469,"impl-From%3CFieldsNamed%3E-for-Fields"],[1470,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[1475,"impl-From%3CItemEnum%3E-for-DeriveInput"],[1477,"impl-From%3CItemUnion%3E-for-DeriveInput"],[1478,"impl-From%3CItemStruct%3E-for-DeriveInput"],[1483,"impl-From%3CExprBlock%3E-for-Expr"],[1484,"impl-From%3CExprUnsafe%3E-for-Expr"],[1485,"impl-From%3CExprMethodCall%3E-for-Expr"],[1486,"impl-From%3CExprCast%3E-for-Expr"],[1488,"impl-From%3CExprBinary%3E-for-Expr"],[1489,"impl-From%3CExprCall%3E-for-Expr"],[1490,"impl-From%3CExprStruct%3E-for-Expr"],[1491,"impl-From%3CExprTry%3E-for-Expr"],[1492,"impl-From%3CExprMatch%3E-for-Expr"],[1493,"impl-From%3CExprParen%3E-for-Expr"],[1494,"impl-From%3CExprTryBlock%3E-for-Expr"],[1495,"impl-From%3CExprTuple%3E-for-Expr"],[1496,"impl-From%3CExprLet%3E-for-Expr"],[1497,"impl-From%3CExprConst%3E-for-Expr"],[1498,"impl-From%3CExprBreak%3E-for-Expr"],[1499,"impl-From%3CExprForLoop%3E-for-Expr"],[1500,"impl-From%3CExprIndex%3E-for-Expr"],[1501,"impl-From%3CExprYield%3E-for-Expr"],[1502,"impl-From%3CExprReference%3E-for-Expr"],[1503,"impl-From%3CExprAsync%3E-for-Expr"],[1504,"impl-From%3CExprAwait%3E-for-Expr"],[1505,"impl-From%3CExprClosure%3E-for-Expr"],[1506,"impl-From%3CExprField%3E-for-Expr"],[1507,"impl-From%3CExprAssign%3E-for-Expr"],[1508,"impl-From%3CExprContinue%3E-for-Expr"],[1509,"impl-From%3CExprIf%3E-for-Expr"],[1510,"impl-From%3CExprRange%3E-for-Expr"],[1511,"impl-From%3CExprArray%3E-for-Expr"],[1512,"impl-From%3CExprMacro%3E-for-Expr"],[1513,"impl-From%3CExprLit%3E-for-Expr"],[1514,"impl-From%3CExprUnary%3E-for-Expr"],[1515,"impl-From%3CExprRepeat%3E-for-Expr"],[1516,"impl-From%3CExprLoop%3E-for-Expr"],[1517,"impl-From%3CExprWhile%3E-for-Expr"],[1518,"impl-From%3CExprReturn%3E-for-Expr"],[1519,"impl-From%3CExprPath%3E-for-Expr"],[1520,"impl-From%3CExprGroup%3E-for-Expr"],[1521,"impl-From%3CExprInfer%3E-for-Expr"],[1560,"impl-From%3CIndex%3E-for-Member"],[1561,"impl-From%3Cusize%3E-for-Member"],[1563,"impl-From%3CIdent%3E-for-Member"],[1573,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[1574,"impl-From%3CTypeParam%3E-for-GenericParam"],[1575,"impl-From%3CConstParam%3E-for-GenericParam"],[1581,"impl-From%3CLifetime%3E-for-TypeParamBound"],[1583,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[1587,"impl-From%3CPredicateType%3E-for-WherePredicate"],[1589,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[1592,"impl-From%3CItemFn%3E-for-Item"],[1593,"impl-From%3CItemStruct%3E-for-Item"],[1594,"impl-From%3CItemEnum%3E-for-Item"],[1595,"impl-From%3CItemConst%3E-for-Item"],[1596,"impl-From%3CItemImpl%3E-for-Item"],[1597,"impl-From%3CItemType%3E-for-Item"],[1598,"impl-From%3CItemMod%3E-for-Item"],[1599,"impl-From%3CItemForeignMod%3E-for-Item"],[1600,"impl-From%3CDeriveInput%3E-for-Item"],[1601,"impl-From%3CItemMacro%3E-for-Item"],[1603,"impl-From%3CItemUse%3E-for-Item"],[1604,"impl-From%3CItemExternCrate%3E-for-Item"],[1605,"impl-From%3CItemTraitAlias%3E-for-Item"],[1606,"impl-From%3CItemTrait%3E-for-Item"],[1607,"impl-From%3CItemUnion%3E-for-Item"],[1608,"impl-From%3CItemStatic%3E-for-Item"],[1624,"impl-From%3CUseName%3E-for-UseTree"],[1625,"impl-From%3CUseRename%3E-for-UseTree"],[1626,"impl-From%3CUseGlob%3E-for-UseTree"],[1628,"impl-From%3CUseGroup%3E-for-UseTree"],[1629,"impl-From%3CUsePath%3E-for-UseTree"],[1636,"impl-From%3CForeignItemType%3E-for-ForeignItem"],[1637,"impl-From%3CForeignItemMacro%3E-for-ForeignItem"],[1638,"impl-From%3CForeignItemStatic%3E-for-ForeignItem"],[1639,"impl-From%3CForeignItemFn%3E-for-ForeignItem"],[1644,"impl-From%3CTraitItemType%3E-for-TraitItem"],[1645,"impl-From%3CTraitItemFn%3E-for-TraitItem"],[1647,"impl-From%3CTraitItemMacro%3E-for-TraitItem"],[1648,"impl-From%3CTraitItemConst%3E-for-TraitItem"],[1653,"impl-From%3CImplItemFn%3E-for-ImplItem"],[1654,"impl-From%3CImplItemMacro%3E-for-ImplItem"],[1655,"impl-From%3CImplItemConst%3E-for-ImplItem"],[1656,"impl-From%3CImplItemType%3E-for-ImplItem"],[1663,"impl-From%3CPatType%3E-for-FnArg"],[1664,"impl-From%3CReceiver%3E-for-FnArg"],[1670,"impl-From%3CLitInt%3E-for-Lit"],[1671,"impl-From%3CLitByteStr%3E-for-Lit"],[1672,"impl-From%3CLitStr%3E-for-Lit"],[1673,"impl-From%3CLitChar%3E-for-Lit"],[1674,"impl-From%3CLitFloat%3E-for-Lit"],[1675,"impl-From%3CLitByte%3E-for-Lit"],[1677,"impl-From%3CLitBool%3E-for-Lit"],[1691,"impl-From%3CPatOr%3E-for-Pat"],[1692,"impl-From%3CPatIdent%3E-for-Pat"],[1693,"impl-From%3CExprMacro%3E-for-Pat"],[1694,"impl-From%3CExprConst%3E-for-Pat"],[1695,"impl-From%3CPatRest%3E-for-Pat"],[1696,"impl-From%3CPatParen%3E-for-Pat"],[1697,"impl-From%3CExprRange%3E-for-Pat"],[1698,"impl-From%3CPatStruct%3E-for-Pat"],[1699,"impl-From%3CPatReference%3E-for-Pat"],[1700,"impl-From%3CPatTuple%3E-for-Pat"],[1701,"impl-From%3CPatType%3E-for-Pat"],[1702,"impl-From%3CPatSlice%3E-for-Pat"],[1704,"impl-From%3CExprLit%3E-for-Pat"],[1705,"impl-From%3CPatTupleStruct%3E-for-Pat"],[1706,"impl-From%3CPatWild%3E-for-Pat"],[1707,"impl-From%3CExprPath%3E-for-Pat"],[1741,"impl-From%3CTypeTraitObject%3E-for-Type"],[1742,"impl-From%3CTypeNever%3E-for-Type"],[1743,"impl-From%3CTypeArray%3E-for-Type"],[1744,"impl-From%3CTypeInfer%3E-for-Type"],[1745,"impl-From%3CTypeBareFn%3E-for-Type"],[1746,"impl-From%3CTypeParen%3E-for-Type"],[1747,"impl-From%3CTypePtr%3E-for-Type"],[1748,"impl-From%3CTypeTuple%3E-for-Type"],[1749,"impl-From%3CTypeGroup%3E-for-Type"],[1750,"impl-From%3CTypePath%3E-for-Type"],[1751,"impl-From%3CTypeSlice%3E-for-Type"],[1752,"impl-From%3CTypeImplTrait%3E-for-Type"],[1753,"impl-From%3CTypeMacro%3E-for-Type"],[1754,"impl-From%3CTypeReference%3E-for-Type"],[2032,"impl-IntoIterator-for-%26Fields"],[2033,"impl-IntoIterator-for-Fields"],[2034,"impl-IntoIterator-for-%26mut+Fields"],[2256,"impl-Parse-for-LitStr"],[2257,"impl-LitStr"],[2415,"impl-Ident"],[2416,"impl-IdentFragment-for-Ident"],[3725,"impl-Display-for-Error"],[3726,"impl-Debug-for-Error"],[3727,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[3728,"impl-Display-for-ParseBuffer%3C\'a%3E"],[3742,"impl-IntoIterator-for-%26Error"],[3743,"impl-IntoIterator-for-Error"],[3830,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[3831,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3842,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3843,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[3855,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[3856,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[3857,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]],"b":[]},\
"utf8parse":{"doc":"A table-driven UTF-8 Parser","t":"DILLLLKLLLLLKLLLL","n":["Parser","Receiver","advance","borrow","borrow_mut","clone","codepoint","default","eq","fmt","from","into","invalid_sequence","new","try_from","try_into","type_id"],"q":[[0,"utf8parse"],[17,"core::fmt"],[18,"core::fmt"],[19,"core::any"]],"d":["A parser for Utf8 Characters","Handles codepoint and invalid sequence events from the …","Advance the parser","","","","Called whenever a codepoint is parsed successfully","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Called when an invalid_sequence is detected","Create a new Parser","","",""],"i":[0,0,1,1,1,1,4,1,1,1,1,1,4,1,1,1,1],"f":[0,0,[[1,-1,2],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,5],3,[]],[[],1],[[1,1],6],[[1,7],8],[-1,-1,[]],[-1,-2,[],[]],[-1,3,[]],[[],1],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[3,"Parser",0],[15,"u8"],[15,"tuple"],[8,"Receiver",0],[15,"char"],[15,"bool"],[3,"Formatter",17],[6,"Result",17],[4,"Result",18],[3,"TypeId",19]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
